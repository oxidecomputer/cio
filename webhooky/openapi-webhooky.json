{
  "openapi": "3.0.3",
  "info": {
    "title": "Webhooks API",
    "description": "Internal webhooks server for listening to several third party webhooks",
    "contact": {
      "url": "https://oxide.computer",
      "email": "webhooks@oxide.computer"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Return the OpenAPI schema in JSON format.",
        "operationId": "api_get_schema",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/applicants/request_background_check": {
      "post": {
        "summary": "Listen for a button pressed to request a background check for an applicant.",
        "operationId": "listen_airtable_applicants_request_background_check_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/applicants/update": {
      "post": {
        "summary": "Listen for rows updated in our Airtable workspace.",
        "description": "These are set up with an Airtable script on the workspaces themselves.",
        "operationId": "listen_airtable_applicants_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/assets/items/print_barcode_label": {
      "post": {
        "summary": "Listen for a button pressed to print a barcode label for an asset item.",
        "operationId": "listen_airtable_assets_items_print_barcode_label_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/certificates/renew": {
      "post": {
        "summary": "Listen for a button pressed to renew a certificate.",
        "operationId": "listen_airtable_certificates_renew_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/employees/print_home_address_label": {
      "post": {
        "summary": "Listen for a button pressed to print a home address label for employees.",
        "operationId": "listen_airtable_employees_print_home_address_label_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/inbound/create": {
      "post": {
        "summary": "Listen for rows created in our Airtable workspace.",
        "description": "These are set up with an Airtable script on the workspaces themselves.",
        "operationId": "listen_airtable_shipments_inbound_create_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/outbound/create": {
      "post": {
        "summary": "Listen for rows created in our Airtable workspace.",
        "description": "These are set up with an Airtable script on the workspaces themselves.",
        "operationId": "listen_airtable_shipments_outbound_create_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/outbound/reprint_label": {
      "post": {
        "summary": "Listen for a button pressed to reprint a label for an outbound shipment.",
        "operationId": "listen_airtable_shipments_outbound_reprint_label_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/outbound/reprint_receipt": {
      "post": {
        "summary": "Listen for a button pressed to reprint a receipt for an outbound shipment.",
        "operationId": "listen_airtable_shipments_outbound_reprint_receipt_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/outbound/resend_shipment_status_email_to_recipient": {
      "post": {
        "summary": "Listen for a button pressed to resend a shipment status email to the recipient for an outbound shipment.",
        "operationId": "listen_airtable_shipments_outbound_resend_shipment_status_email_to_recipient_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/shipments/outbound/schedule_pickup": {
      "post": {
        "summary": "Listen for a button pressed to schedule a pickup for an outbound shipment.",
        "operationId": "listen_airtable_shipments_outbound_schedule_pickup_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/airtable/swag/inventory/items/print_barcode_labels": {
      "post": {
        "summary": "Listen for a button pressed to print barcode labels for a swag inventory item.",
        "operationId": "listen_airtable_swag_inventory_items_print_barcode_labels_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirtableRowEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/analytics/page_view": {
      "post": {
        "summary": "Listen for analytics page view events.",
        "operationId": "listen_analytics_page_view_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPageView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/applicant/info/{email}": {
      "get": {
        "operationId": "listen_applicant_info",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/applicant/info/{email}/upload-token": {
      "get": {
        "operationId": "listen_applicant_upload_token",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantUploadToken"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/applicant/review/submit": {
      "post": {
        "summary": "Listen for applicant reviews being submitted for job applicants",
        "operationId": "listen_applicant_review_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApplicantReview"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/application/files/upload": {
      "post": {
        "summary": "Listen for files being uploaded for incoming job applications",
        "operationId": "listen_application_files_upload_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationFileUploadData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_String",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "options": {
        "summary": "CORS functionality for file uploads",
        "operationId": "listen_application_files_upload_requests_cors",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/application/submit": {
      "post": {
        "summary": "Listen for applications being submitted for incoming job applications",
        "operationId": "listen_application_submit_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/application-test/files/upload": {
      "post": {
        "summary": "Listen for files being uploaded for incoming job applications",
        "operationId": "listen_test_application_files_upload_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationFileUploadData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_String",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "options": {
        "summary": "CORS functionality for file uploads",
        "operationId": "listen_test_application_files_upload_requests_cors",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/application-test/submit": {
      "post": {
        "summary": "Listen for applications being submitted for incoming job applications",
        "operationId": "listen_test_application_submit_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/docusign/callback": {
      "get": {
        "summary": "Listen for callbacks to DocuSign auth.",
        "operationId": "listen_auth_docusign_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/docusign/consent": {
      "get": {
        "summary": "Get the consent URL for DocuSign auth.",
        "operationId": "listen_auth_docusign_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "summary": "Listen for callbacks to GitHub auth.",
        "operationId": "listen_auth_github_callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/github/consent": {
      "get": {
        "summary": "Get the consent URL for GitHub auth.",
        "operationId": "listen_auth_github_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Listen for callbacks to Google auth.",
        "operationId": "listen_auth_google_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/google/consent": {
      "get": {
        "summary": "Get the consent URL for Google auth.",
        "operationId": "listen_auth_google_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/gusto/callback": {
      "get": {
        "summary": "Listen for callbacks to Gusto auth.",
        "operationId": "listen_auth_gusto_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/gusto/consent": {
      "get": {
        "summary": "Get the consent URL for Gusto auth.",
        "operationId": "listen_auth_gusto_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/quickbooks/callback": {
      "get": {
        "summary": "Listen for callbacks to QuickBooks auth.",
        "operationId": "listen_auth_quickbooks_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/quickbooks/consent": {
      "get": {
        "summary": "Get the consent URL for QuickBooks auth.",
        "operationId": "listen_auth_quickbooks_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/ramp/callback": {
      "get": {
        "summary": "Listen for callbacks to Ramp auth.",
        "operationId": "listen_auth_ramp_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/ramp/consent": {
      "get": {
        "summary": "Get the consent URL for Ramp auth.",
        "operationId": "listen_auth_ramp_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/slack/callback": {
      "get": {
        "summary": "Listen for callbacks to Slack auth.",
        "operationId": "listen_auth_slack_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/slack/consent": {
      "get": {
        "summary": "Get the consent URL for Slack auth.",
        "operationId": "listen_auth_slack_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/zoom/callback": {
      "get": {
        "summary": "Listen for callbacks to Zoom auth.",
        "operationId": "listen_auth_zoom_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "description": "The state that we had passed in through the user consent URL.",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/zoom/consent": {
      "get": {
        "summary": "Get the consent URL for Zoom auth.",
        "operationId": "listen_auth_zoom_consent",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/zoom/deauthorization": {
      "get": {
        "summary": "Listen to deauthorization requests for our Zoom app.",
        "operationId": "listen_auth_zoom_deauthorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/checkr/background/update": {
      "post": {
        "summary": "Listen for updates to our checkr background checks.",
        "operationId": "listen_checkr_background_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/docusign/envelope/update": {
      "post": {
        "summary": "Listen for updates to our docusign envelopes.",
        "operationId": "listen_docusign_envelope_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Envelope"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/easypost/tracking/update": {
      "post": {
        "summary": "Listen for shipment tracking updated from EasyPost.",
        "operationId": "listen_easypost_tracking_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasyPostTrackingUpdateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/github": {
      "post": {
        "summary": "Listen for GitHub webhooks.",
        "operationId": "listen_github_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitHubWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/github/ratelimit": {
      "get": {
        "summary": "Get our current GitHub rate limit.",
        "operationId": "github_rate_limit",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitHubRateLimit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/mailchimp/mailing_list": {
      "get": {
        "summary": "Ping endpoint for MailChimp mailing list webhooks.",
        "operationId": "ping_mailchimp_mailing_list_webhooks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Listen for MailChimp mailing list webhooks.",
        "operationId": "listen_mailchimp_mailing_list_webhooks",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/mailchimp/rack_line": {
      "get": {
        "summary": "Ping endpoint for MailChimp rack line webhooks.",
        "operationId": "ping_mailchimp_rack_line_webhooks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Listen for MailChimp rack line webhooks.",
        "operationId": "listen_mailchimp_rack_line_webhooks",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Return pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/plaid": {
      "post": {
        "summary": "Listen for webhooks from Plaid.",
        "operationId": "listen_auth_plaid_callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/products/sold/count": {
      "get": {
        "summary": "Return the count of products sold.",
        "operationId": "listen_products_sold_count_requests",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/rfd/{num}": {
      "post": {
        "summary": "Trigger an update for an RFD.",
        "operationId": "trigger_rfd_update_by_number",
        "parameters": [
          {
            "in": "path",
            "name": "num",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/rfds": {
      "get": {
        "summary": "List metadata of all RFDs",
        "operationId": "listen_rfd_index",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFDIndexEntryResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": true
      }
    },
    "/run/cleanup": {
      "post": {
        "summary": "Listen for triggering a cleanup of all in-progress sagas, we typically run this when the server",
        "description": "is shutting down.",
        "operationId": "trigger_cleanup_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Null",
                  "type": "string",
                  "enum": [
                    null
                  ]
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-analytics": {
      "post": {
        "summary": "Listen for triggering a function run of sync analytics.",
        "operationId": "trigger_sync_analytics_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-api-tokens": {
      "post": {
        "summary": "Listen for triggering a function run of sync api tokens.",
        "operationId": "trigger_sync_api_tokens_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-applications": {
      "post": {
        "summary": "Listen for triggering a function run of sync applications.",
        "operationId": "trigger_sync_applications_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-asset-inventory": {
      "post": {
        "summary": "Listen for triggering a function run of sync asset inventory.",
        "operationId": "trigger_sync_asset_inventory_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-companies": {
      "post": {
        "summary": "Listen for triggering a function run of sync companies.",
        "operationId": "trigger_sync_companies_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-configs": {
      "post": {
        "summary": "Listen for triggering a function run of sync configs.",
        "operationId": "trigger_sync_configs_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-finance": {
      "post": {
        "summary": "Listen for triggering a function run of sync finance.",
        "operationId": "trigger_sync_finance_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-functions": {
      "post": {
        "summary": "Listen for triggering a function run of sync functions.",
        "operationId": "trigger_sync_functions_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-huddles": {
      "post": {
        "summary": "Listen for triggering a function run of sync huddles.",
        "operationId": "trigger_sync_huddles_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-interviews": {
      "post": {
        "summary": "Listen for triggering a function run of sync interviews.",
        "operationId": "trigger_sync_interviews_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-journal-clubs": {
      "post": {
        "summary": "Listen for triggering a function run of sync journal clubs.",
        "operationId": "trigger_sync_journal_clubs_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-mailing-lists": {
      "post": {
        "summary": "Listen for triggering a function run of sync mailing lists.",
        "operationId": "trigger_sync_mailing_lists_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-other": {
      "post": {
        "summary": "Listen for triggering a function run of sync other.",
        "operationId": "trigger_sync_other_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-recorded-meetings": {
      "post": {
        "summary": "Listen for triggering a function run of sync recorded meetings.",
        "operationId": "trigger_sync_recorded_meetings_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-repos": {
      "post": {
        "summary": "Listen for triggering a function run of sync repos.",
        "operationId": "trigger_sync_repos_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-rfds": {
      "post": {
        "summary": "Listen for triggering a function run of sync RFDs.",
        "operationId": "trigger_sync_rfds_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-shipments": {
      "post": {
        "summary": "Listen for triggering a function run of sync shipments.",
        "operationId": "trigger_sync_shipments_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-shorturls": {
      "post": {
        "summary": "Listen for triggering a function run of sync shorturls.",
        "operationId": "trigger_sync_shorturls_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-swag-inventory": {
      "post": {
        "summary": "Listen for triggering a function run of sync swag inventory.",
        "operationId": "trigger_sync_swag_inventory_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-travel": {
      "post": {
        "summary": "Listen for triggering a function run of sync travel.",
        "operationId": "trigger_sync_travel_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/run/sync-zoho": {
      "post": {
        "summary": "Listen for triggering a function run of sync zoho.",
        "operationId": "trigger_sync_zoho_create",
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Uuid",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/shipbob": {
      "post": {
        "summary": "Listen for shipbob webhooks.",
        "operationId": "listen_shipbob_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/shippo/tracking/update": {
      "post": {
        "summary": "Listen for shipment tracking updated from Shippo.",
        "operationId": "listen_shippo_tracking_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/slack/commands": {
      "post": {
        "summary": "Listen for Slack commands webhooks.",
        "operationId": "listen_slack_commands_webhooks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BotCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/slack/interactive": {
      "post": {
        "summary": "Listen for Slack interactive webhooks.",
        "operationId": "listen_slack_interactive_webhooks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/InteractiveEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "summary": "Listen for orders being created by the Oxide store.",
        "operationId": "listen_store_order_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "AirtableRowEvent": {
        "description": "An Airtable row event.",
        "type": "object",
        "properties": {
          "cio_company_id": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "record_id": {
            "type": "string"
          }
        }
      },
      "ApplicantInfo": {
        "type": "object",
        "properties": {
          "application": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationView"
              }
            ]
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ApplicantUploadToken": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "token"
        ]
      },
      "ApplicationFileUploadData": {
        "description": "Application file upload data.",
        "type": "object",
        "properties": {
          "cio_company_id": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "interested_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "materials": {
            "type": "string"
          },
          "materials_contents": {
            "type": "string"
          },
          "portfolio_pdf_contents": {
            "type": "string"
          },
          "portfolio_pdf_name": {
            "type": "string"
          },
          "resume": {
            "type": "string"
          },
          "resume_contents": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        }
      },
      "ApplicationForm": {
        "type": "object",
        "properties": {
          "cio_company_id": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "github": {
            "type": "string"
          },
          "interested_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "materials": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "portfolio": {
            "type": "string"
          },
          "portfolio_pdf": {
            "type": "string"
          },
          "resume": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "ApplicationView": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "role",
          "status",
          "submitted_at"
        ]
      },
      "BccEmailAddress": {
        "type": "object",
        "properties": {
          "bccEmailAddressId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "BotCommand": {
        "description": "A bot command to be run and sent back to Slack.\n\nDocs: https://api.slack.com/interactivity/slash-commands#app_command_handling",
        "type": "object",
        "properties": {
          "api_app_id": {
            "type": "string"
          },
          "channel_id": {
            "type": "string"
          },
          "channel_name": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "response_url": {
            "type": "string"
          },
          "team_domain": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "trigger_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        }
      },
      "CounterResponse": {
        "type": "object",
        "properties": {
          "count": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomFields": {
        "type": "object",
        "properties": {
          "textCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextCustomField"
            }
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "PDFBytes": {
            "description": "These appear to be base64 encoded.",
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EasyPostTrackingUpdateEvent": {
        "description": "An EasyPost tracking update event. FROM: https://www.easypost.com/docs/api#events",
        "type": "object",
        "properties": {
          "completed_urls": {
            "description": "Webhook URLs that have already been successfully notified as of the time this webhook was sent.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Result type and event name, see the \"Possible Event Types\" section for more information.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier, begins with \"evt_\".",
            "type": "string"
          },
          "mode": {
            "description": "\"test\" or \"production\"",
            "type": "string"
          },
          "object": {
            "description": "\"Event\".",
            "type": "string"
          },
          "pending_urls": {
            "description": "Webhook URLs that have not yet been successfully notified as of the time this webhook event was sent. The URL receiving the Event will still be listed in pending_urls, as will any other URLs that receive the Event at the same time.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "The current status of the event. Possible values are \"completed\", \"failed\", \"in_queue\", \"retrying\", or \"pending\" (deprecated).",
            "type": "string"
          },
          "updated_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EmailNotification": {
        "type": "object",
        "properties": {
          "emailBody": {
            "description": "This is the same as the email body. If specified it is included in the email body for all envelope recipients.",
            "type": "string"
          },
          "emailSubject": {
            "description": "The subject line of the email message that is sent to all recipients.\n\nFor information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).",
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "EmailSettings": {
        "type": "object",
        "properties": {
          "bccEmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BccEmailAddress"
            }
          },
          "replyEmailAddressOverride": {
            "type": "string"
          },
          "replyEmailNameOverride": {
            "type": "string"
          }
        }
      },
      "Envelope": {
        "type": "object",
        "properties": {
          "allowComments": {
            "type": "string"
          },
          "allowMarkup": {
            "type": "string"
          },
          "allowReassign": {
            "type": "string"
          },
          "allowViewHistory": {
            "type": "string"
          },
          "asynchronous": {
            "type": "string"
          },
          "attachmentsUri": {
            "type": "string"
          },
          "brandId": {
            "type": "string"
          },
          "brandLock": {
            "type": "string"
          },
          "completedDateTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "copyRecipientData": {
            "type": "string"
          },
          "createdDateTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "customFields": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFields"
              }
            ]
          },
          "customFieldsUri": {
            "type": "string"
          },
          "declinedDateTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "deliveredDateTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "disableResponsiveDocument": {
            "type": "string"
          },
          "documentsUri": {
            "type": "string"
          },
          "emailBlurb": {
            "description": "This is the same as the email body. If specified it is included in the email body for all envelope recipients.",
            "type": "string"
          },
          "emailSettings": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailSettings"
              }
            ]
          },
          "emailSubject": {
            "description": "The subject line of the email message that is sent to all recipients.\n\nFor information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).",
            "type": "string"
          },
          "envelopeDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "envelopeId": {
            "type": "string"
          },
          "envelopeUri": {
            "type": "string"
          },
          "is21CFRPart11": {
            "type": "string"
          },
          "isSignatureProviderEnvelope": {
            "type": "string"
          },
          "lockInformation": {
            "default": {
              "errorDetails": {},
              "lockedByUser": {}
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LockInformation"
              }
            ]
          },
          "purgeState": {
            "type": "string"
          },
          "recipients": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/Recipients"
              }
            ]
          },
          "recipientsUri": {
            "type": "string"
          },
          "signerCanSignOnMobile": {
            "type": "string"
          },
          "signingLocation": {
            "type": "string"
          },
          "status": {
            "description": "Indicates the envelope status. Valid values are:\n\n* `completed`: The envelope has been completed and all tags have been signed. * `created`: The envelope is created as a draft. It can be modified and sent later. * `declined`: The envelope has been declined by the recipients. * `delivered`: The envelope has been delivered to the recipients. * `sent`: The envelope is sent to the recipients. * `signed`: The envelope has been signed by the recipients. * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.",
            "type": "string"
          },
          "templateId": {
            "description": "The id of the template. If a value is not provided, DocuSign generates a value.",
            "type": "string"
          },
          "templateRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateRole"
            }
          },
          "transactionId": {
            "type": "string"
          },
          "useDisclosure": {
            "type": "string"
          }
        }
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "EventData": {
        "type": "object",
        "properties": {
          "object": {
            "default": {
              "completed_at": null,
              "created_at": null,
              "due_time": null,
              "estimated_completion_time": null,
              "revised_at": null,
              "upgraded_at": null
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/EventObject"
              }
            ]
          }
        }
      },
      "EventObject": {
        "type": "object",
        "properties": {
          "arrest_search_id": {
            "type": "string"
          },
          "assessment": {
            "type": "string"
          },
          "candidate_id": {
            "type": "string"
          },
          "candidate_story_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "completed_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "county_criminal_search_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "due_time": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "estimated_completion_time": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "facis_search_id": {
            "type": "string"
          },
          "federal_criminal_search_id": {
            "type": "string"
          },
          "global_watchlist_search_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "motor_vehicle_report_id": {
            "type": "string"
          },
          "municipal_criminal_search_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "national_criminal_search_id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "package": {
            "type": "string"
          },
          "personal_reference_verification_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pointer_state_criminal_search_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "professional_license_verification_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "professional_reference_verification_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "string"
          },
          "revised_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "self_disclosure_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sex_offender_search_id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "ssn_trace_id": {
            "type": "string"
          },
          "state_criminal_search_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "terrorist_watchlist_search_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "upgraded_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "GitHubApp": {
        "description": "A GitHub app.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "GitHubCheckRun": {
        "description": "A GitHub check run. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#get-a-check-run",
        "type": "object",
        "properties": {
          "app": {
            "default": {
              "id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubApp"
              }
            ]
          },
          "check_suite": {
            "default": {
              "app": {
                "id": 0
              },
              "id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckSuite"
              }
            ]
          },
          "conclusion": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "GitHubCheckSuite": {
        "description": "A GitHub check suite. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#suites",
        "type": "object",
        "properties": {
          "app": {
            "default": {
              "id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubApp"
              }
            ]
          },
          "conclusion": {
            "type": "string"
          },
          "head_branch": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "GitHubComment": {
        "description": "A octorust::Client comment. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#comments",
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          }
        }
      },
      "GitHubCommit": {
        "description": "A GitHub commit. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push",
        "type": "object",
        "properties": {
          "added": {
            "description": "An array of files added in the commit.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "author": {
            "description": "The git author of the commit.",
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          },
          "commit_ref": {
            "type": "string"
          },
          "distinct": {
            "description": "Whether this commit is distinct from any that have been pushed before.",
            "default": false,
            "type": "boolean"
          },
          "id": {
            "description": "The SHA of the commit.",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "description": "The commit message.",
            "type": "string"
          },
          "modified": {
            "description": "An array of files modified by the commit.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removed": {
            "description": "An array of files removed in the commit.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sha": {
            "type": "string"
          },
          "timestamp": {
            "nullable": true,
            "description": "The ISO 8601 timestamp of the commit.",
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "description": "URL that points to the commit API resource.",
            "type": "string"
          }
        }
      },
      "GitHubInstallation": {
        "description": "A GitHub app installation.",
        "type": "object",
        "properties": {
          "access_tokens_url": {
            "type": "string"
          },
          "app_id": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "repositories_url": {
            "type": "string"
          },
          "repository_selection": {
            "type": "string"
          },
          "single_file_name": {
            "type": "string"
          },
          "target_id": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "target_type": {
            "type": "string"
          }
        }
      },
      "GitHubIssue": {
        "description": "A octorust::Client issue. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/issues",
        "type": "object",
        "properties": {
          "assignee": {
            "nullable": true,
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitHubUser"
            }
          },
          "body": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "comments": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "labels_url": {
            "type": "string"
          },
          "locked": {
            "default": false,
            "type": "boolean"
          },
          "number": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "pull_request": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubPullRef"
              }
            ]
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          }
        },
        "required": [
          "events_url",
          "labels_url"
        ]
      },
      "GitHubOrganization": {
        "description": "A GitHub organization.",
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "issues_url": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "public_members_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "hooks_url",
          "id",
          "issues_url",
          "login",
          "members_url",
          "public_members_url",
          "repos_url",
          "url"
        ]
      },
      "GitHubPullRef": {
        "description": "A reference to a pull request.",
        "type": "object",
        "properties": {
          "diff_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitHubPullRequest": {
        "description": "A GitHub pull request. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#get-a-pull-request",
        "type": "object",
        "properties": {
          "base": {
            "default": {
              "author": {
                "id": 0,
                "site_admin": false
              },
              "distinct": false,
              "timestamp": null
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCommit"
              }
            ]
          },
          "body": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "default": null,
            "type": "string",
            "format": "date-time"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "head": {
            "default": {
              "author": {
                "id": 0,
                "site_admin": false
              },
              "distinct": false,
              "timestamp": null
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCommit"
              }
            ]
          },
          "html_url": {
            "description": "The HTML location of this pull request.",
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "issue_url": {
            "type": "string"
          },
          "merged": {
            "default": false,
            "type": "boolean"
          },
          "merged_at": {
            "nullable": true,
            "default": null,
            "type": "string",
            "format": "date-time"
          },
          "number": {
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "patch_url": {
            "type": "string"
          },
          "review_comment_url": {
            "type": "string"
          },
          "review_comments_url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          }
        }
      },
      "GitHubRateLimit": {
        "description": "A GitHub RateLimit",
        "type": "object",
        "properties": {
          "limit": {
            "default": 0,
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "remaining": {
            "default": 0,
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "reset": {
            "default": "",
            "type": "string"
          }
        }
      },
      "GitHubRepo": {
        "description": "A GitHub repository. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push",
        "type": "object",
        "properties": {
          "default_branch": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          }
        }
      },
      "GitHubUser": {
        "description": "The data type for a GitHub user.",
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "site_admin": {
            "default": false,
            "type": "boolean"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GitHubWebhook": {
        "description": "A GitHub webhook event. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads",
        "type": "object",
        "properties": {
          "action": {
            "description": "Most webhook payloads contain an action property that contains the specific activity that triggered the event.",
            "type": "string"
          },
          "after": {
            "description": "The SHA of the most recent commit on `ref` after the push.",
            "type": "string"
          },
          "before": {
            "description": "The SHA of the most recent commit on `ref` before the push.",
            "type": "string"
          },
          "check_run": {
            "nullable": true,
            "description": "`check_run` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#check_run\n\nThe check run itself.",
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckRun"
              }
            ]
          },
          "check_suite": {
            "description": "`check_suite` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#check_suite\n\nThe check suite itself.",
            "default": {
              "app": {
                "id": 0
              },
              "id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckSuite"
              }
            ]
          },
          "comment": {
            "description": "`issue_comment` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#issue_comment\n\nThe comment itself.",
            "default": {
              "id": 0,
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubComment"
              }
            ]
          },
          "commits": {
            "description": "An array of commit objects describing the pushed commits. The array includes a maximum of 20 commits. If necessary, you can use the Commits API to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitHubCommit"
            }
          },
          "installation": {
            "description": "The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured for and sent to a GitHub App.",
            "default": {
              "app_id": 0,
              "id": 0,
              "target_id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubInstallation"
              }
            ]
          },
          "issue": {
            "description": "`issues` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#issues\n\nThe issue itself.",
            "default": {
              "assignee": null,
              "comments": 0,
              "events_url": "",
              "id": 0,
              "labels_url": "",
              "locked": false,
              "number": 0,
              "pull_request": {},
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubIssue"
              }
            ]
          },
          "number": {
            "description": "`pull_request` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#pull_request\n\nThe pull request number.",
            "default": 0,
            "type": "integer",
            "format": "int64"
          },
          "organization": {
            "description": "Webhook payloads contain the `organization` object when the webhook is configured for an organization or the event occurs from activity in a repository owned by an organization.",
            "default": {
              "avatar_url": "",
              "events_url": "",
              "hooks_url": "",
              "id": 0,
              "issues_url": "",
              "login": "",
              "members_url": "",
              "public_members_url": "",
              "repos_url": "",
              "url": ""
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubOrganization"
              }
            ]
          },
          "pull_request": {
            "description": "The pull request itself.",
            "default": {
              "base": {
                "author": {
                  "id": 0,
                  "site_admin": false
                },
                "distinct": false,
                "timestamp": null
              },
              "closed_at": null,
              "head": {
                "author": {
                  "id": 0,
                  "site_admin": false
                },
                "distinct": false,
                "timestamp": null
              },
              "id": 0,
              "merged": false,
              "merged_at": null,
              "number": 0,
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubPullRequest"
              }
            ]
          },
          "ref": {
            "description": "`push` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push\n\nThe full `git ref` that was pushed. Example: `refs/heads/main`.",
            "type": "string"
          },
          "repository": {
            "description": "The `repository` where the event occurred. Webhook payloads contain the `repository` property when the event occurs from activity in a repository.",
            "default": {
              "owner": {
                "id": 0,
                "site_admin": false
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubRepo"
              }
            ]
          },
          "sender": {
            "description": "The user that triggered the event. This property is included in every webhook payload.",
            "default": {
              "id": 0,
              "site_admin": false
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ]
          }
        }
      },
      "InteractiveEvent": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string"
          }
        },
        "required": [
          "payload"
        ]
      },
      "LockInformation": {
        "type": "object",
        "properties": {
          "errorDetails": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorDetails"
              }
            ]
          },
          "lockDurationInSeconds": {
            "type": "string"
          },
          "lockToken": {
            "type": "string"
          },
          "lockType": {
            "type": "string"
          },
          "lockedByApp": {
            "type": "string"
          },
          "lockedByUser": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/LockedByUser"
              }
            ]
          },
          "lockedUntilDateTime": {
            "type": "string"
          },
          "useScratchPad": {
            "type": "string"
          }
        }
      },
      "LockedByUser": {
        "type": "object"
      },
      "NewApplicantReview": {
        "type": "object",
        "properties": {
          "Any additional evaluation (not to be shared with applicant)": {
            "type": "string"
          },
          "Applicant": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Evaluation": {
            "type": "string"
          },
          "If \"Pass\" or \"No\", rationale if applicable (check all that apply)": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Link to Leaderboard": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          },
          "Reviewer": {
            "type": "string"
          },
          "Value Reflected (from Questionnaire)": {
            "type": "string"
          },
          "Value Violated (from Questionnaire)": {
            "type": "string"
          },
          "Values in Tension (from Questionnaire)": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cio_company_id": {
            "description": "The CIO company ID.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NewPageView": {
        "type": "object",
        "properties": {
          "cio_company_id": {
            "description": "The CIO company ID.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "domain": {
            "type": "string"
          },
          "link_to_auth_user": {
            "description": "link to another table in Airtable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "page_link": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "user_email": {
            "type": "string"
          }
        },
        "required": [
          "domain",
          "path",
          "time",
          "user_email"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "cio_company_id": {
            "description": "The CIO company ID.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "description": "This is who they know at the company.",
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "street_1": {
            "type": "string"
          },
          "street_2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "This is the swag inventory item id.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "default": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RFDIndexEntry": {
        "description": "The data type for an RFD.",
        "type": "object",
        "properties": {
          "authors": {
            "type": "string"
          },
          "commit_date": {
            "description": "commit_date is the date of the last commit that modified the file",
            "default": "2022-07-26T15:32:23.894772272Z",
            "type": "string",
            "format": "date-time"
          },
          "discussion": {
            "type": "string"
          },
          "link": {
            "description": "link is the canonical link to the source.",
            "type": "string"
          },
          "milestones": {
            "description": "milestones only exist in Airtable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "(generated) name is a combination of number and title.",
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "number_string": {
            "description": "(generated) number_string is the long version of the number with leading zeros",
            "type": "string"
          },
          "relevant_components": {
            "description": "relevant_components only exist in Airtable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rendered_link": {
            "description": "(generated) rendered_link is the link to the rfd in the rendered html website in the form of https://rfd.shared.oxide.computer/rfd/{{number_string}}",
            "type": "string"
          },
          "sha": {
            "description": "sha is the SHA of the last commit that modified the file",
            "type": "string"
          },
          "short_link": {
            "description": "(generated) short_link is the generated link in the form of https://{number}.rfd.oxide.computer",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "link",
          "number",
          "state",
          "title"
        ]
      },
      "RFDIndexEntryResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFDIndexEntry"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Recipient": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email of the recipient. Notification will be sent to this email id. Maximum Length: 100 characters.",
            "type": "string"
          },
          "name": {
            "description": "Full legal name of the recipient. Maximum Length: 100 characters.\n\nNote: If you are creating an envelope with DocuSign EU advanced signature enabled, ensure that recipient names do not contain any of the following characters: ^ : \\ @ , + <",
            "type": "string"
          },
          "recipientId": {
            "description": "Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.",
            "type": "string"
          },
          "roleName": {
            "description": "Optional element. Specifies the role name associated with the recipient. This is required when working with template recipients.",
            "type": "string"
          },
          "signerName": {
            "description": "Required element with recipient type In Person Signers. Maximum Length: 100 characters.\n\nThe full legal name of a signer for the envelope.",
            "type": "string"
          }
        }
      },
      "Recipients": {
        "type": "object",
        "properties": {
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          }
        }
      },
      "TemplateRole": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email of the recipient. Notification will be sent to this email id. Maximum Length: 100 characters.",
            "type": "string"
          },
          "emailNotification": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailNotification"
              }
            ]
          },
          "name": {
            "description": "Full legal name of the recipient. Maximum Length: 100 characters.\n\nNote: If you are creating an envelope with DocuSign EU advanced signature enabled, ensure that recipient names do not contain any of the following characters: ^ : \\ @ , + <",
            "type": "string"
          },
          "roleName": {
            "description": "Optional element. Specifies the role name associated with the recipient. This is required when working with template recipients.",
            "type": "string"
          },
          "routingOrder": {
            "description": "This specifies the routing order of the recipient in the envelope.",
            "type": "string"
          },
          "signerName": {
            "description": "Required element with recipient type In Person Signers. Maximum Length: 100 characters.\n\nThe full legal name of a signer for the envelope.",
            "type": "string"
          }
        }
      },
      "TextCustomField": {
        "type": "object",
        "properties": {
          "configurationType": {
            "type": "string"
          },
          "errorDetails": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorDetails"
              }
            ]
          },
          "fieldId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "string"
          },
          "show": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "required",
          "show",
          "value"
        ]
      },
      "UserConsentURL": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "WebhookEvent": {
        "description": "The data type for a webhook event.",
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "default": {
              "object": {
                "completed_at": null,
                "created_at": null,
                "due_time": null,
                "estimated_completion_time": null,
                "revised_at": null,
                "upgraded_at": null
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/EventData"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "created_at"
        ]
      }
    }
  }
}