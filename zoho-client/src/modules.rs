use crate::client::RecordsModule;
///
/// Do not edit this file manually. It is generated from the Zoho metadata APIs
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Deserialize)]
pub struct Leads {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Company")]
    pub company: Option<String>,
    #[serde(alias = "First_Name")]
    pub first_name: Option<String>,
    #[serde(alias = "Salutation")]
    pub salutation: Option<String>,
    #[serde(alias = "Last_Name")]
    pub last_name: Option<String>,
    #[serde(alias = "Full_Name")]
    pub full_name: Option<String>,
    #[serde(alias = "Designation")]
    pub designation: Option<String>,
    #[serde(alias = "Email")]
    pub email: Option<String>,
    #[serde(alias = "Phone")]
    pub phone: Option<String>,
    #[serde(alias = "Fax")]
    pub fax: Option<String>,
    #[serde(alias = "Mobile")]
    pub mobile: Option<String>,
    #[serde(alias = "Website")]
    pub website: Option<String>,
    #[serde(alias = "Lead_Source")]
    pub lead_source: Option<String>,
    #[serde(alias = "Lead_Status")]
    pub lead_status: Option<String>,
    #[serde(alias = "Industry")]
    pub industry: Option<String>,
    #[serde(alias = "No_of_Employees")]
    pub no_of_employees: Option<i64>,
    #[serde(alias = "Annual_Revenue")]
    pub annual_revenue: Option<f64>,
    #[serde(alias = "Rating")]
    pub rating: Option<String>,
    #[serde(alias = "Email_Opt_Out")]
    pub email_opt_out: Option<bool>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Skype_ID")]
    pub skype_id: Option<String>,
    #[serde(alias = "LinkedIn_Profile")]
    pub linkedin_profile: Option<String>,
    #[serde(alias = "Secondary_Email")]
    pub secondary_email: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Twitter")]
    pub twitter: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Airtable_Lead_Record_Id")]
    pub airtable_lead_record_id: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Last_Activity_Time")]
    pub last_activity_time: Option<String>,
    #[serde(alias = "Unsubscribed_Mode")]
    pub unsubscribed_mode: Option<String>,
    #[serde(alias = "Unsubscribed_Time")]
    pub unsubscribed_time: Option<String>,
    #[serde(alias = "Street")]
    pub street: Option<String>,
    #[serde(alias = "City")]
    pub city: Option<String>,
    #[serde(alias = "State")]
    pub state: Option<String>,
    #[serde(alias = "Zip_Code")]
    pub zip_code: Option<String>,
    #[serde(alias = "Country")]
    pub country: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Submitted_Interest")]
    pub submitted_interest: Option<String>,
    #[serde(alias = "Record_Image")]
    pub record_image: Option<String>,
}

impl RecordsModule for Leads {
    type Input = LeadsInput;
    fn api_path() -> &'static str {
        "Leads"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct LeadsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    #[serde(rename = "First_Name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "Salutation", skip_serializing_if = "Option::is_none")]
    pub salutation: Option<String>,
    #[serde(rename = "Last_Name")]
    pub last_name: String,
    #[serde(rename = "Full_Name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "Designation", skip_serializing_if = "Option::is_none")]
    pub designation: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "Fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    #[serde(rename = "Mobile", skip_serializing_if = "Option::is_none")]
    pub mobile: Option<String>,
    #[serde(rename = "Website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    #[serde(rename = "Lead_Source", skip_serializing_if = "Option::is_none")]
    pub lead_source: Option<String>,
    #[serde(rename = "Lead_Status", skip_serializing_if = "Option::is_none")]
    pub lead_status: Option<String>,
    #[serde(rename = "Industry", skip_serializing_if = "Option::is_none")]
    pub industry: Option<String>,
    #[serde(rename = "No_of_Employees", skip_serializing_if = "Option::is_none")]
    pub no_of_employees: Option<i64>,
    #[serde(rename = "Annual_Revenue", skip_serializing_if = "Option::is_none")]
    pub annual_revenue: Option<f64>,
    #[serde(rename = "Rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<String>,
    #[serde(rename = "Email_Opt_Out", skip_serializing_if = "Option::is_none")]
    pub email_opt_out: Option<bool>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Skype_ID", skip_serializing_if = "Option::is_none")]
    pub skype_id: Option<String>,
    #[serde(rename = "LinkedIn_Profile", skip_serializing_if = "Option::is_none")]
    pub linkedin_profile: Option<String>,
    #[serde(rename = "Secondary_Email", skip_serializing_if = "Option::is_none")]
    pub secondary_email: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Twitter", skip_serializing_if = "Option::is_none")]
    pub twitter: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Airtable_Lead_Record_Id", skip_serializing_if = "Option::is_none")]
    pub airtable_lead_record_id: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Last_Activity_Time", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "Unsubscribed_Mode", skip_serializing_if = "Option::is_none")]
    pub unsubscribed_mode: Option<String>,
    #[serde(rename = "Unsubscribed_Time", skip_serializing_if = "Option::is_none")]
    pub unsubscribed_time: Option<String>,
    #[serde(rename = "Street", skip_serializing_if = "Option::is_none")]
    pub street: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "State", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "Zip_Code", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Submitted_Interest", skip_serializing_if = "Option::is_none")]
    pub submitted_interest: Option<String>,
    #[serde(rename = "Record_Image", skip_serializing_if = "Option::is_none")]
    pub record_image: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Contacts {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "First_Name")]
    pub first_name: Option<String>,
    #[serde(alias = "Salutation")]
    pub salutation: Option<String>,
    #[serde(alias = "Lead_Source")]
    pub lead_source: Option<String>,
    #[serde(alias = "Last_Name")]
    pub last_name: Option<String>,
    #[serde(alias = "Full_Name")]
    pub full_name: Option<String>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Phone")]
    pub phone: Option<String>,
    #[serde(alias = "Email")]
    pub email: Option<String>,
    #[serde(alias = "Vendor_Name")]
    pub vendor_name: Option<serde_json::Value>,
    #[serde(alias = "Mobile")]
    pub mobile: Option<String>,
    #[serde(alias = "Department")]
    pub department: Option<String>,
    #[serde(alias = "Title")]
    pub title: Option<String>,
    #[serde(alias = "Contact_Status")]
    pub contact_status: Option<String>,
    #[serde(alias = "Contact_Status1")]
    pub contact_status1: Option<String>,
    #[serde(alias = "Assistant")]
    pub assistant: Option<String>,
    #[serde(alias = "Home_Phone")]
    pub home_phone: Option<String>,
    #[serde(alias = "Asst_Phone")]
    pub asst_phone: Option<String>,
    #[serde(alias = "Other_Phone")]
    pub other_phone: Option<String>,
    #[serde(alias = "Fax")]
    pub fax: Option<String>,
    #[serde(alias = "Email_Opt_Out")]
    pub email_opt_out: Option<bool>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Layout")]
    pub layout: Option<String>,
    #[serde(alias = "Date_of_Birth")]
    pub date_of_birth: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Reporting_To")]
    pub reporting_to: Option<serde_json::Value>,
    #[serde(alias = "LinkedIn_Profile")]
    pub linkedin_profile: Option<String>,
    #[serde(alias = "Secondary_Email")]
    pub secondary_email: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Last_Activity_Time")]
    pub last_activity_time: Option<String>,
    #[serde(alias = "Skype_ID")]
    pub skype_id: Option<String>,
    #[serde(alias = "Unsubscribed_Mode")]
    pub unsubscribed_mode: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Unsubscribed_Time")]
    pub unsubscribed_time: Option<String>,
    #[serde(alias = "Twitter")]
    pub twitter: Option<String>,
    #[serde(alias = "Mailing_Street")]
    pub mailing_street: Option<String>,
    #[serde(alias = "Other_Street")]
    pub other_street: Option<String>,
    #[serde(alias = "Mailing_City")]
    pub mailing_city: Option<String>,
    #[serde(alias = "Other_City")]
    pub other_city: Option<String>,
    #[serde(alias = "Mailing_State")]
    pub mailing_state: Option<String>,
    #[serde(alias = "Other_State")]
    pub other_state: Option<String>,
    #[serde(alias = "Mailing_Zip")]
    pub mailing_zip: Option<String>,
    #[serde(alias = "Other_Zip")]
    pub other_zip: Option<String>,
    #[serde(alias = "Mailing_Country")]
    pub mailing_country: Option<String>,
    #[serde(alias = "Other_Country")]
    pub other_country: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Record_Image")]
    pub record_image: Option<String>,
}

impl RecordsModule for Contacts {
    type Input = ContactsInput;
    fn api_path() -> &'static str {
        "Contacts"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct ContactsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "First_Name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "Salutation", skip_serializing_if = "Option::is_none")]
    pub salutation: Option<String>,
    #[serde(rename = "Lead_Source", skip_serializing_if = "Option::is_none")]
    pub lead_source: Option<String>,
    #[serde(rename = "Last_Name")]
    pub last_name: String,
    #[serde(rename = "Full_Name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Vendor_Name", skip_serializing_if = "Option::is_none")]
    pub vendor_name: Option<serde_json::Value>,
    #[serde(rename = "Mobile", skip_serializing_if = "Option::is_none")]
    pub mobile: Option<String>,
    #[serde(rename = "Department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,
    #[serde(rename = "Title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "Contact_Status", skip_serializing_if = "Option::is_none")]
    pub contact_status: Option<String>,
    #[serde(rename = "Contact_Status1", skip_serializing_if = "Option::is_none")]
    pub contact_status1: Option<String>,
    #[serde(rename = "Assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<String>,
    #[serde(rename = "Home_Phone", skip_serializing_if = "Option::is_none")]
    pub home_phone: Option<String>,
    #[serde(rename = "Asst_Phone", skip_serializing_if = "Option::is_none")]
    pub asst_phone: Option<String>,
    #[serde(rename = "Other_Phone", skip_serializing_if = "Option::is_none")]
    pub other_phone: Option<String>,
    #[serde(rename = "Fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    #[serde(rename = "Email_Opt_Out", skip_serializing_if = "Option::is_none")]
    pub email_opt_out: Option<bool>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<String>,
    #[serde(rename = "Date_of_Birth", skip_serializing_if = "Option::is_none")]
    pub date_of_birth: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Reporting_To", skip_serializing_if = "Option::is_none")]
    pub reporting_to: Option<serde_json::Value>,
    #[serde(rename = "LinkedIn_Profile", skip_serializing_if = "Option::is_none")]
    pub linkedin_profile: Option<String>,
    #[serde(rename = "Secondary_Email", skip_serializing_if = "Option::is_none")]
    pub secondary_email: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Last_Activity_Time", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "Skype_ID", skip_serializing_if = "Option::is_none")]
    pub skype_id: Option<String>,
    #[serde(rename = "Unsubscribed_Mode", skip_serializing_if = "Option::is_none")]
    pub unsubscribed_mode: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Unsubscribed_Time", skip_serializing_if = "Option::is_none")]
    pub unsubscribed_time: Option<String>,
    #[serde(rename = "Twitter", skip_serializing_if = "Option::is_none")]
    pub twitter: Option<String>,
    #[serde(rename = "Mailing_Street", skip_serializing_if = "Option::is_none")]
    pub mailing_street: Option<String>,
    #[serde(rename = "Other_Street", skip_serializing_if = "Option::is_none")]
    pub other_street: Option<String>,
    #[serde(rename = "Mailing_City", skip_serializing_if = "Option::is_none")]
    pub mailing_city: Option<String>,
    #[serde(rename = "Other_City", skip_serializing_if = "Option::is_none")]
    pub other_city: Option<String>,
    #[serde(rename = "Mailing_State", skip_serializing_if = "Option::is_none")]
    pub mailing_state: Option<String>,
    #[serde(rename = "Other_State", skip_serializing_if = "Option::is_none")]
    pub other_state: Option<String>,
    #[serde(rename = "Mailing_Zip", skip_serializing_if = "Option::is_none")]
    pub mailing_zip: Option<String>,
    #[serde(rename = "Other_Zip", skip_serializing_if = "Option::is_none")]
    pub other_zip: Option<String>,
    #[serde(rename = "Mailing_Country", skip_serializing_if = "Option::is_none")]
    pub mailing_country: Option<String>,
    #[serde(rename = "Other_Country", skip_serializing_if = "Option::is_none")]
    pub other_country: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Record_Image", skip_serializing_if = "Option::is_none")]
    pub record_image: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Accounts {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<String>,
    #[serde(alias = "Rating")]
    pub rating: Option<String>,
    #[serde(alias = "Parent_Account")]
    pub parent_account: Option<serde_json::Value>,
    #[serde(alias = "Website")]
    pub website: Option<String>,
    #[serde(alias = "Phone")]
    pub phone: Option<String>,
    #[serde(alias = "Industry")]
    pub industry: Option<String>,
    #[serde(alias = "Account_Site")]
    pub account_site: Option<String>,
    #[serde(alias = "Fax")]
    pub fax: Option<String>,
    #[serde(alias = "Annual_Revenue")]
    pub annual_revenue: Option<f64>,
    #[serde(alias = "Account_Number")]
    pub account_number: Option<String>,
    #[serde(alias = "Employees")]
    pub employees: Option<i64>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Ticker_Symbol")]
    pub ticker_symbol: Option<String>,
    #[serde(alias = "Account_Source")]
    pub account_source: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Account_Type")]
    pub account_type: Option<String>,
    #[serde(alias = "Ownership")]
    pub ownership: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Account_Score")]
    pub account_score: Option<f64>,
    #[serde(alias = "Layout")]
    pub layout: Option<serde_json::Value>,
    #[serde(alias = "SIC_Code")]
    pub sic_code: Option<i64>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Last_Activity_Time")]
    pub last_activity_time: Option<String>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Billing_Street")]
    pub billing_street: Option<String>,
    #[serde(alias = "Shipping_Street")]
    pub shipping_street: Option<String>,
    #[serde(alias = "Billing_City")]
    pub billing_city: Option<String>,
    #[serde(alias = "Shipping_City")]
    pub shipping_city: Option<String>,
    #[serde(alias = "Billing_State")]
    pub billing_state: Option<String>,
    #[serde(alias = "Shipping_State")]
    pub shipping_state: Option<String>,
    #[serde(alias = "Billing_Code")]
    pub billing_code: Option<String>,
    #[serde(alias = "Shipping_Code")]
    pub shipping_code: Option<String>,
    #[serde(alias = "Billing_Country")]
    pub billing_country: Option<String>,
    #[serde(alias = "Shipping_Country")]
    pub shipping_country: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Technologies")]
    pub technologies: Option<String>,
    #[serde(alias = "Incumbents")]
    pub incumbents: Option<String>,
    #[serde(alias = "Requirements")]
    pub requirements: Option<String>,
    #[serde(alias = "Pain_Points")]
    pub pain_points: Option<String>,
    #[serde(alias = "Cloud_Adoption")]
    pub cloud_adoption: Option<bool>,
    #[serde(alias = "Storytelling_Culture")]
    pub storytelling_culture: Option<bool>,
    #[serde(alias = "SRE_Team")]
    pub sre_team: Option<bool>,
    #[serde(alias = "LinkedIn_Profile")]
    pub linkedin_profile: Option<String>,
    #[serde(alias = "Rust_Appreciation")]
    pub rust_appreciation: Option<bool>,
    #[serde(alias = "Technology_Evolution")]
    pub technology_evolution: Option<String>,
    #[serde(alias = "Board_Members")]
    pub board_members: Option<String>,
    #[serde(alias = "Record_Image")]
    pub record_image: Option<String>,
    #[serde(alias = "Account_Status")]
    pub account_status: Option<String>,
    #[serde(alias = "Point_of_Contact")]
    pub point_of_contact: Option<serde_json::Value>,
    #[serde(alias = "NDA")]
    pub nda: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Status_Date")]
    pub status_date: Option<String>,
    #[serde(alias = "Status_Update")]
    pub status_update: Option<String>,
    #[serde(alias = "Next_Steps_Date")]
    pub next_steps_date: Option<String>,
    #[serde(alias = "Next_Steps")]
    pub next_steps: Option<String>,
}

impl RecordsModule for Accounts {
    type Input = AccountsInput;
    fn api_path() -> &'static str {
        "Accounts"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct AccountsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Account_Name")]
    pub account_name: String,
    #[serde(rename = "Rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<String>,
    #[serde(rename = "Parent_Account", skip_serializing_if = "Option::is_none")]
    pub parent_account: Option<serde_json::Value>,
    #[serde(rename = "Website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "Industry", skip_serializing_if = "Option::is_none")]
    pub industry: Option<String>,
    #[serde(rename = "Account_Site", skip_serializing_if = "Option::is_none")]
    pub account_site: Option<String>,
    #[serde(rename = "Fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    #[serde(rename = "Annual_Revenue", skip_serializing_if = "Option::is_none")]
    pub annual_revenue: Option<f64>,
    #[serde(rename = "Account_Number", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "Employees", skip_serializing_if = "Option::is_none")]
    pub employees: Option<i64>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Ticker_Symbol", skip_serializing_if = "Option::is_none")]
    pub ticker_symbol: Option<String>,
    #[serde(rename = "Account_Source", skip_serializing_if = "Option::is_none")]
    pub account_source: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Account_Type", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<String>,
    #[serde(rename = "Ownership", skip_serializing_if = "Option::is_none")]
    pub ownership: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Account_Score", skip_serializing_if = "Option::is_none")]
    pub account_score: Option<f64>,
    #[serde(rename = "Layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<serde_json::Value>,
    #[serde(rename = "SIC_Code", skip_serializing_if = "Option::is_none")]
    pub sic_code: Option<i64>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Last_Activity_Time", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Billing_Street", skip_serializing_if = "Option::is_none")]
    pub billing_street: Option<String>,
    #[serde(rename = "Shipping_Street", skip_serializing_if = "Option::is_none")]
    pub shipping_street: Option<String>,
    #[serde(rename = "Billing_City", skip_serializing_if = "Option::is_none")]
    pub billing_city: Option<String>,
    #[serde(rename = "Shipping_City", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "Billing_State", skip_serializing_if = "Option::is_none")]
    pub billing_state: Option<String>,
    #[serde(rename = "Shipping_State", skip_serializing_if = "Option::is_none")]
    pub shipping_state: Option<String>,
    #[serde(rename = "Billing_Code", skip_serializing_if = "Option::is_none")]
    pub billing_code: Option<String>,
    #[serde(rename = "Shipping_Code", skip_serializing_if = "Option::is_none")]
    pub shipping_code: Option<String>,
    #[serde(rename = "Billing_Country", skip_serializing_if = "Option::is_none")]
    pub billing_country: Option<String>,
    #[serde(rename = "Shipping_Country", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Technologies", skip_serializing_if = "Option::is_none")]
    pub technologies: Option<String>,
    #[serde(rename = "Incumbents", skip_serializing_if = "Option::is_none")]
    pub incumbents: Option<String>,
    #[serde(rename = "Requirements", skip_serializing_if = "Option::is_none")]
    pub requirements: Option<String>,
    #[serde(rename = "Pain_Points", skip_serializing_if = "Option::is_none")]
    pub pain_points: Option<String>,
    #[serde(rename = "Cloud_Adoption", skip_serializing_if = "Option::is_none")]
    pub cloud_adoption: Option<bool>,
    #[serde(rename = "Storytelling_Culture", skip_serializing_if = "Option::is_none")]
    pub storytelling_culture: Option<bool>,
    #[serde(rename = "SRE_Team", skip_serializing_if = "Option::is_none")]
    pub sre_team: Option<bool>,
    #[serde(rename = "LinkedIn_Profile", skip_serializing_if = "Option::is_none")]
    pub linkedin_profile: Option<String>,
    #[serde(rename = "Rust_Appreciation", skip_serializing_if = "Option::is_none")]
    pub rust_appreciation: Option<bool>,
    #[serde(rename = "Technology_Evolution", skip_serializing_if = "Option::is_none")]
    pub technology_evolution: Option<String>,
    #[serde(rename = "Board_Members", skip_serializing_if = "Option::is_none")]
    pub board_members: Option<String>,
    #[serde(rename = "Record_Image", skip_serializing_if = "Option::is_none")]
    pub record_image: Option<String>,
    #[serde(rename = "Account_Status", skip_serializing_if = "Option::is_none")]
    pub account_status: Option<String>,
    #[serde(rename = "Point_of_Contact", skip_serializing_if = "Option::is_none")]
    pub point_of_contact: Option<serde_json::Value>,
    #[serde(rename = "NDA", skip_serializing_if = "Option::is_none")]
    pub nda: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Status_Date", skip_serializing_if = "Option::is_none")]
    pub status_date: Option<String>,
    #[serde(rename = "Status_Update", skip_serializing_if = "Option::is_none")]
    pub status_update: Option<String>,
    #[serde(rename = "Next_Steps_Date", skip_serializing_if = "Option::is_none")]
    pub next_steps_date: Option<String>,
    #[serde(rename = "Next_Steps", skip_serializing_if = "Option::is_none")]
    pub next_steps: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Deals {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Amount")]
    pub amount: Option<f64>,
    #[serde(alias = "Deal_Name")]
    pub deal_name: Option<String>,
    #[serde(alias = "Closing_Date")]
    pub closing_date: Option<String>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Type")]
    pub _type: Option<String>,
    #[serde(alias = "Stage")]
    pub stage: Option<String>,
    #[serde(alias = "Next_Step")]
    pub next_step: Option<String>,
    #[serde(alias = "Probability")]
    pub probability: Option<i64>,
    #[serde(alias = "Lead_Source")]
    pub lead_source: Option<String>,
    #[serde(alias = "Expected_Revenue")]
    pub expected_revenue: Option<f64>,
    #[serde(alias = "Contact_Name")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(alias = "Campaign_Source")]
    pub campaign_source: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Number_of_Sleds")]
    pub number_of_sleds: Option<i64>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Deal_Activities")]
    pub deal_activities: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Last_Activity_Time")]
    pub last_activity_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Sales_Cycle_Duration")]
    pub sales_cycle_duration: Option<i64>,
    #[serde(alias = "Lead_Conversion_Time")]
    pub lead_conversion_time: Option<i64>,
    #[serde(alias = "Overall_Sales_Duration")]
    pub overall_sales_duration: Option<i64>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
}

impl RecordsModule for Deals {
    type Input = DealsInput;
    fn api_path() -> &'static str {
        "Deals"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct DealsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    #[serde(rename = "Deal_Name")]
    pub deal_name: String,
    #[serde(rename = "Closing_Date", skip_serializing_if = "Option::is_none")]
    pub closing_date: Option<String>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "Stage")]
    pub stage: String,
    #[serde(rename = "Next_Step", skip_serializing_if = "Option::is_none")]
    pub next_step: Option<String>,
    #[serde(rename = "Probability", skip_serializing_if = "Option::is_none")]
    pub probability: Option<i64>,
    #[serde(rename = "Lead_Source", skip_serializing_if = "Option::is_none")]
    pub lead_source: Option<String>,
    #[serde(rename = "Expected_Revenue", skip_serializing_if = "Option::is_none")]
    pub expected_revenue: Option<f64>,
    #[serde(rename = "Contact_Name", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(rename = "Campaign_Source", skip_serializing_if = "Option::is_none")]
    pub campaign_source: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Number_of_Sleds", skip_serializing_if = "Option::is_none")]
    pub number_of_sleds: Option<i64>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Deal_Activities", skip_serializing_if = "Option::is_none")]
    pub deal_activities: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Last_Activity_Time", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Sales_Cycle_Duration", skip_serializing_if = "Option::is_none")]
    pub sales_cycle_duration: Option<i64>,
    #[serde(rename = "Lead_Conversion_Time", skip_serializing_if = "Option::is_none")]
    pub lead_conversion_time: Option<i64>,
    #[serde(rename = "Overall_Sales_Duration", skip_serializing_if = "Option::is_none")]
    pub overall_sales_duration: Option<i64>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Activities {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Activity_Type")]
    pub activity_type: Option<String>,
    #[serde(alias = "Who_Id")]
    pub who_id: Option<serde_json::Value>,
    #[serde(alias = "What_Id")]
    pub what_id: Option<serde_json::Value>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Due_Date")]
    pub due_date: Option<String>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Priority")]
    pub priority: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Recurring_Activity")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(alias = "Closed_Time")]
    pub closed_time: Option<String>,
    #[serde(alias = "Call_Type")]
    pub call_type: Option<String>,
    #[serde(alias = "Call_Start_Time")]
    pub call_start_time: Option<String>,
    #[serde(alias = "Call_Duration")]
    pub call_duration: Option<String>,
    #[serde(alias = "Dialled_Number")]
    pub dialled_number: Option<String>,
    #[serde(alias = "Caller_ID")]
    pub caller_id: Option<String>,
    #[serde(alias = "Reminder")]
    pub reminder: Option<String>,
    #[serde(alias = "Call_Duration_in_seconds")]
    pub call_duration_in_seconds: Option<i64>,
    #[serde(alias = "CTI_Entry")]
    pub cti_entry: Option<bool>,
    #[serde(alias = "Call_Status")]
    pub call_status: Option<String>,
    #[serde(alias = "Call_Purpose")]
    pub call_purpose: Option<String>,
    #[serde(alias = "Call_Agenda")]
    pub call_agenda: Option<String>,
    #[serde(alias = "Call_Result")]
    pub call_result: Option<String>,
    #[serde(alias = "Venue")]
    pub venue: Option<String>,
    #[serde(alias = "All_day")]
    pub all_day: Option<bool>,
    #[serde(alias = "Start_DateTime")]
    pub start_datetime: Option<String>,
    #[serde(alias = "End_DateTime")]
    pub end_datetime: Option<String>,
    #[serde(alias = "Participants")]
    pub participants: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Check_In_Time")]
    pub check_in_time: Option<String>,
    #[serde(alias = "Check_In_By")]
    pub check_in_by: Option<serde_json::Value>,
    #[serde(alias = "Check_In_Comment")]
    pub check_in_comment: Option<String>,
    #[serde(alias = "Check_In_Sub_Locality")]
    pub check_in_sub_locality: Option<String>,
    #[serde(alias = "Check_In_City")]
    pub check_in_city: Option<String>,
    #[serde(alias = "Check_In_State")]
    pub check_in_state: Option<String>,
    #[serde(alias = "Check_In_Country")]
    pub check_in_country: Option<String>,
    #[serde(alias = "Latitude")]
    pub latitude: Option<f64>,
    #[serde(alias = "Longitude")]
    pub longitude: Option<f64>,
    #[serde(alias = "ZIP_Code")]
    pub zip_code: Option<String>,
    #[serde(alias = "Check_In_Address")]
    pub check_in_address: Option<String>,
    #[serde(alias = "Check_In_Status")]
    pub check_in_status: Option<String>,
}

impl RecordsModule for Activities {
    type Input = ActivitiesInput;
    fn api_path() -> &'static str {
        "Activities"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct ActivitiesInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Activity_Type", skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<String>,
    #[serde(rename = "Who_Id", skip_serializing_if = "Option::is_none")]
    pub who_id: Option<serde_json::Value>,
    #[serde(rename = "What_Id", skip_serializing_if = "Option::is_none")]
    pub what_id: Option<serde_json::Value>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Due_Date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Recurring_Activity", skip_serializing_if = "Option::is_none")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(rename = "Closed_Time", skip_serializing_if = "Option::is_none")]
    pub closed_time: Option<String>,
    #[serde(rename = "Call_Type")]
    pub call_type: String,
    #[serde(rename = "Call_Start_Time")]
    pub call_start_time: String,
    #[serde(rename = "Call_Duration")]
    pub call_duration: String,
    #[serde(rename = "Dialled_Number", skip_serializing_if = "Option::is_none")]
    pub dialled_number: Option<String>,
    #[serde(rename = "Caller_ID", skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    #[serde(rename = "Reminder", skip_serializing_if = "Option::is_none")]
    pub reminder: Option<String>,
    #[serde(rename = "Call_Duration_in_seconds", skip_serializing_if = "Option::is_none")]
    pub call_duration_in_seconds: Option<i64>,
    #[serde(rename = "CTI_Entry", skip_serializing_if = "Option::is_none")]
    pub cti_entry: Option<bool>,
    #[serde(rename = "Call_Status", skip_serializing_if = "Option::is_none")]
    pub call_status: Option<String>,
    #[serde(rename = "Call_Purpose", skip_serializing_if = "Option::is_none")]
    pub call_purpose: Option<String>,
    #[serde(rename = "Call_Agenda", skip_serializing_if = "Option::is_none")]
    pub call_agenda: Option<String>,
    #[serde(rename = "Call_Result", skip_serializing_if = "Option::is_none")]
    pub call_result: Option<String>,
    #[serde(rename = "Venue", skip_serializing_if = "Option::is_none")]
    pub venue: Option<String>,
    #[serde(rename = "All_day", skip_serializing_if = "Option::is_none")]
    pub all_day: Option<bool>,
    #[serde(rename = "Start_DateTime")]
    pub start_datetime: String,
    #[serde(rename = "End_DateTime")]
    pub end_datetime: String,
    #[serde(rename = "Participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Check_In_Time", skip_serializing_if = "Option::is_none")]
    pub check_in_time: Option<String>,
    #[serde(rename = "Check_In_By", skip_serializing_if = "Option::is_none")]
    pub check_in_by: Option<serde_json::Value>,
    #[serde(rename = "Check_In_Comment", skip_serializing_if = "Option::is_none")]
    pub check_in_comment: Option<String>,
    #[serde(rename = "Check_In_Sub_Locality", skip_serializing_if = "Option::is_none")]
    pub check_in_sub_locality: Option<String>,
    #[serde(rename = "Check_In_City", skip_serializing_if = "Option::is_none")]
    pub check_in_city: Option<String>,
    #[serde(rename = "Check_In_State", skip_serializing_if = "Option::is_none")]
    pub check_in_state: Option<String>,
    #[serde(rename = "Check_In_Country", skip_serializing_if = "Option::is_none")]
    pub check_in_country: Option<String>,
    #[serde(rename = "Latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    #[serde(rename = "Longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
    #[serde(rename = "ZIP_Code", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    #[serde(rename = "Check_In_Address", skip_serializing_if = "Option::is_none")]
    pub check_in_address: Option<String>,
    #[serde(rename = "Check_In_Status", skip_serializing_if = "Option::is_none")]
    pub check_in_status: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Tasks {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Due_Date")]
    pub due_date: Option<String>,
    #[serde(alias = "Who_Id")]
    pub who_id: Option<serde_json::Value>,
    #[serde(alias = "What_Id")]
    pub what_id: Option<serde_json::Value>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Priority")]
    pub priority: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Send_Notification_Email")]
    pub send_notification_email: Option<bool>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Remind_At")]
    pub remind_at: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Recurring_Activity")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(alias = "Closed_Time")]
    pub closed_time: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
}

impl RecordsModule for Tasks {
    type Input = TasksInput;
    fn api_path() -> &'static str {
        "Tasks"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct TasksInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Due_Date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "Who_Id", skip_serializing_if = "Option::is_none")]
    pub who_id: Option<serde_json::Value>,
    #[serde(rename = "What_Id", skip_serializing_if = "Option::is_none")]
    pub what_id: Option<serde_json::Value>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Send_Notification_Email", skip_serializing_if = "Option::is_none")]
    pub send_notification_email: Option<bool>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Remind_At", skip_serializing_if = "Option::is_none")]
    pub remind_at: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Recurring_Activity", skip_serializing_if = "Option::is_none")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(rename = "Closed_Time", skip_serializing_if = "Option::is_none")]
    pub closed_time: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Events {
    pub id: String,
    #[serde(alias = "Event_Title")]
    pub event_title: Option<String>,
    #[serde(alias = "Venue")]
    pub venue: Option<String>,
    #[serde(alias = "All_day")]
    pub all_day: Option<bool>,
    #[serde(alias = "Start_DateTime")]
    pub start_datetime: Option<String>,
    #[serde(alias = "End_DateTime")]
    pub end_datetime: Option<String>,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Participants")]
    pub participants: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Who_Id")]
    pub who_id: Option<serde_json::Value>,
    #[serde(alias = "What_Id")]
    pub what_id: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Recurring_Activity")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Remind_At")]
    pub remind_at: Option<String>,
    #[serde(alias = "Check_In_Time")]
    pub check_in_time: Option<String>,
    #[serde(alias = "Check_In_By")]
    pub check_in_by: Option<serde_json::Value>,
    #[serde(alias = "Check_In_Comment")]
    pub check_in_comment: Option<String>,
    #[serde(alias = "Check_In_Sub_Locality")]
    pub check_in_sub_locality: Option<String>,
    #[serde(alias = "Check_In_City")]
    pub check_in_city: Option<String>,
    #[serde(alias = "Check_In_State")]
    pub check_in_state: Option<String>,
    #[serde(alias = "Check_In_Country")]
    pub check_in_country: Option<String>,
    #[serde(alias = "Latitude")]
    pub latitude: Option<f64>,
    #[serde(alias = "Longitude")]
    pub longitude: Option<f64>,
    #[serde(alias = "ZIP_Code")]
    pub zip_code: Option<String>,
    #[serde(alias = "Check_In_Address")]
    pub check_in_address: Option<String>,
    #[serde(alias = "Check_In_Status")]
    pub check_in_status: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
}

impl RecordsModule for Events {
    type Input = EventsInput;
    fn api_path() -> &'static str {
        "Events"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct EventsInput {
    #[serde(rename = "Event_Title")]
    pub event_title: String,
    #[serde(rename = "Venue", skip_serializing_if = "Option::is_none")]
    pub venue: Option<String>,
    #[serde(rename = "All_day", skip_serializing_if = "Option::is_none")]
    pub all_day: Option<bool>,
    #[serde(rename = "Start_DateTime")]
    pub start_datetime: String,
    #[serde(rename = "End_DateTime")]
    pub end_datetime: String,
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Who_Id", skip_serializing_if = "Option::is_none")]
    pub who_id: Option<serde_json::Value>,
    #[serde(rename = "What_Id", skip_serializing_if = "Option::is_none")]
    pub what_id: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Recurring_Activity", skip_serializing_if = "Option::is_none")]
    pub recurring_activity: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Remind_At", skip_serializing_if = "Option::is_none")]
    pub remind_at: Option<String>,
    #[serde(rename = "Check_In_Time", skip_serializing_if = "Option::is_none")]
    pub check_in_time: Option<String>,
    #[serde(rename = "Check_In_By", skip_serializing_if = "Option::is_none")]
    pub check_in_by: Option<serde_json::Value>,
    #[serde(rename = "Check_In_Comment", skip_serializing_if = "Option::is_none")]
    pub check_in_comment: Option<String>,
    #[serde(rename = "Check_In_Sub_Locality", skip_serializing_if = "Option::is_none")]
    pub check_in_sub_locality: Option<String>,
    #[serde(rename = "Check_In_City", skip_serializing_if = "Option::is_none")]
    pub check_in_city: Option<String>,
    #[serde(rename = "Check_In_State", skip_serializing_if = "Option::is_none")]
    pub check_in_state: Option<String>,
    #[serde(rename = "Check_In_Country", skip_serializing_if = "Option::is_none")]
    pub check_in_country: Option<String>,
    #[serde(rename = "Latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    #[serde(rename = "Longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
    #[serde(rename = "ZIP_Code", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    #[serde(rename = "Check_In_Address", skip_serializing_if = "Option::is_none")]
    pub check_in_address: Option<String>,
    #[serde(rename = "Check_In_Status", skip_serializing_if = "Option::is_none")]
    pub check_in_status: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Products {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Product_Name")]
    pub product_name: Option<String>,
    #[serde(alias = "Product_Code")]
    pub product_code: Option<String>,
    #[serde(alias = "Vendor_Name")]
    pub vendor_name: Option<serde_json::Value>,
    #[serde(alias = "Product_Active")]
    pub product_active: Option<bool>,
    #[serde(alias = "Manufacturer")]
    pub manufacturer: Option<String>,
    #[serde(alias = "Product_Category")]
    pub product_category: Option<String>,
    #[serde(alias = "Sales_Start_Date")]
    pub sales_start_date: Option<String>,
    #[serde(alias = "Sales_End_Date")]
    pub sales_end_date: Option<String>,
    #[serde(alias = "Support_Start_Date")]
    pub support_start_date: Option<String>,
    #[serde(alias = "Support_Expiry_Date")]
    pub support_expiry_date: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Unit_Price")]
    pub unit_price: Option<f64>,
    #[serde(alias = "Commission_Rate")]
    pub commission_rate: Option<f64>,
    #[serde(alias = "Tax")]
    pub tax: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Taxable")]
    pub taxable: Option<bool>,
    #[serde(alias = "Usage_Unit")]
    pub usage_unit: Option<String>,
    #[serde(alias = "Qty_Ordered")]
    pub qty_ordered: Option<f64>,
    #[serde(alias = "Qty_in_Stock")]
    pub qty_in_stock: Option<f64>,
    #[serde(alias = "Reorder_Level")]
    pub reorder_level: Option<f64>,
    #[serde(alias = "Handler")]
    pub handler: Option<serde_json::Value>,
    #[serde(alias = "Qty_in_Demand")]
    pub qty_in_demand: Option<f64>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Record_Image")]
    pub record_image: Option<String>,
}

impl RecordsModule for Products {
    type Input = ProductsInput;
    fn api_path() -> &'static str {
        "Products"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct ProductsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Product_Name")]
    pub product_name: String,
    #[serde(rename = "Product_Code", skip_serializing_if = "Option::is_none")]
    pub product_code: Option<String>,
    #[serde(rename = "Vendor_Name", skip_serializing_if = "Option::is_none")]
    pub vendor_name: Option<serde_json::Value>,
    #[serde(rename = "Product_Active", skip_serializing_if = "Option::is_none")]
    pub product_active: Option<bool>,
    #[serde(rename = "Manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    #[serde(rename = "Product_Category", skip_serializing_if = "Option::is_none")]
    pub product_category: Option<String>,
    #[serde(rename = "Sales_Start_Date", skip_serializing_if = "Option::is_none")]
    pub sales_start_date: Option<String>,
    #[serde(rename = "Sales_End_Date", skip_serializing_if = "Option::is_none")]
    pub sales_end_date: Option<String>,
    #[serde(rename = "Support_Start_Date", skip_serializing_if = "Option::is_none")]
    pub support_start_date: Option<String>,
    #[serde(rename = "Support_Expiry_Date", skip_serializing_if = "Option::is_none")]
    pub support_expiry_date: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Unit_Price", skip_serializing_if = "Option::is_none")]
    pub unit_price: Option<f64>,
    #[serde(rename = "Commission_Rate", skip_serializing_if = "Option::is_none")]
    pub commission_rate: Option<f64>,
    #[serde(rename = "Tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Taxable", skip_serializing_if = "Option::is_none")]
    pub taxable: Option<bool>,
    #[serde(rename = "Usage_Unit", skip_serializing_if = "Option::is_none")]
    pub usage_unit: Option<String>,
    #[serde(rename = "Qty_Ordered", skip_serializing_if = "Option::is_none")]
    pub qty_ordered: Option<f64>,
    #[serde(rename = "Qty_in_Stock", skip_serializing_if = "Option::is_none")]
    pub qty_in_stock: Option<f64>,
    #[serde(rename = "Reorder_Level", skip_serializing_if = "Option::is_none")]
    pub reorder_level: Option<f64>,
    #[serde(rename = "Handler", skip_serializing_if = "Option::is_none")]
    pub handler: Option<serde_json::Value>,
    #[serde(rename = "Qty_in_Demand", skip_serializing_if = "Option::is_none")]
    pub qty_in_demand: Option<f64>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Record_Image", skip_serializing_if = "Option::is_none")]
    pub record_image: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Quotes {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Quote_Number")]
    pub quote_number: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Deal_Name")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(alias = "Quote_Stage")]
    pub quote_stage: Option<String>,
    #[serde(alias = "Valid_Till")]
    pub valid_till: Option<String>,
    #[serde(alias = "Team")]
    pub team: Option<String>,
    #[serde(alias = "Contact_Name")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(alias = "Carrier")]
    pub carrier: Option<String>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Billing_Street")]
    pub billing_street: Option<String>,
    #[serde(alias = "Shipping_Street")]
    pub shipping_street: Option<String>,
    #[serde(alias = "Billing_City")]
    pub billing_city: Option<String>,
    #[serde(alias = "Shipping_City")]
    pub shipping_city: Option<String>,
    #[serde(alias = "Billing_State")]
    pub billing_state: Option<String>,
    #[serde(alias = "Shipping_State")]
    pub shipping_state: Option<String>,
    #[serde(alias = "Billing_Code")]
    pub billing_code: Option<String>,
    #[serde(alias = "Shipping_Code")]
    pub shipping_code: Option<String>,
    #[serde(alias = "Billing_Country")]
    pub billing_country: Option<String>,
    #[serde(alias = "Shipping_Country")]
    pub shipping_country: Option<String>,
    #[serde(alias = "Product_Details")]
    pub product_details: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Terms_and_Conditions")]
    pub terms_and_conditions: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Sub_Total")]
    pub sub_total: Option<f64>,
    #[serde(alias = "Discount")]
    pub discount: Option<f64>,
    #[serde(alias = "Tax")]
    pub tax: Option<f64>,
    #[serde(alias = "Adjustment")]
    pub adjustment: Option<f64>,
    #[serde(alias = "Grand_Total")]
    pub grand_total: Option<f64>,
}

impl RecordsModule for Quotes {
    type Input = QuotesInput;
    fn api_path() -> &'static str {
        "Quotes"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct QuotesInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Quote_Number", skip_serializing_if = "Option::is_none")]
    pub quote_number: Option<String>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Deal_Name", skip_serializing_if = "Option::is_none")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(rename = "Quote_Stage", skip_serializing_if = "Option::is_none")]
    pub quote_stage: Option<String>,
    #[serde(rename = "Valid_Till", skip_serializing_if = "Option::is_none")]
    pub valid_till: Option<String>,
    #[serde(rename = "Team", skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "Contact_Name", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(rename = "Carrier", skip_serializing_if = "Option::is_none")]
    pub carrier: Option<String>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Billing_Street", skip_serializing_if = "Option::is_none")]
    pub billing_street: Option<String>,
    #[serde(rename = "Shipping_Street", skip_serializing_if = "Option::is_none")]
    pub shipping_street: Option<String>,
    #[serde(rename = "Billing_City", skip_serializing_if = "Option::is_none")]
    pub billing_city: Option<String>,
    #[serde(rename = "Shipping_City", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "Billing_State", skip_serializing_if = "Option::is_none")]
    pub billing_state: Option<String>,
    #[serde(rename = "Shipping_State", skip_serializing_if = "Option::is_none")]
    pub shipping_state: Option<String>,
    #[serde(rename = "Billing_Code", skip_serializing_if = "Option::is_none")]
    pub billing_code: Option<String>,
    #[serde(rename = "Shipping_Code", skip_serializing_if = "Option::is_none")]
    pub shipping_code: Option<String>,
    #[serde(rename = "Billing_Country", skip_serializing_if = "Option::is_none")]
    pub billing_country: Option<String>,
    #[serde(rename = "Shipping_Country", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "Product_Details")]
    pub product_details: Vec<serde_json::Value>,
    #[serde(rename = "Terms_and_Conditions", skip_serializing_if = "Option::is_none")]
    pub terms_and_conditions: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Sub_Total", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<f64>,
    #[serde(rename = "Discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    #[serde(rename = "Tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    #[serde(rename = "Adjustment", skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<f64>,
    #[serde(rename = "Grand_Total", skip_serializing_if = "Option::is_none")]
    pub grand_total: Option<f64>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct SalesOrders {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "SO_Number")]
    pub so_number: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Deal_Name")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(alias = "Customer_No")]
    pub customer_no: Option<String>,
    #[serde(alias = "Purchase_Order")]
    pub purchase_order: Option<String>,
    #[serde(alias = "Quote_Name")]
    pub quote_name: Option<serde_json::Value>,
    #[serde(alias = "Due_Date")]
    pub due_date: Option<String>,
    #[serde(alias = "Pending")]
    pub pending: Option<String>,
    #[serde(alias = "Contact_Name")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(alias = "Carrier")]
    pub carrier: Option<String>,
    #[serde(alias = "Excise_Duty")]
    pub excise_duty: Option<f64>,
    #[serde(alias = "Sales_Commission")]
    pub sales_commission: Option<f64>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Billing_Street")]
    pub billing_street: Option<String>,
    #[serde(alias = "Shipping_Street")]
    pub shipping_street: Option<String>,
    #[serde(alias = "Billing_City")]
    pub billing_city: Option<String>,
    #[serde(alias = "Shipping_City")]
    pub shipping_city: Option<String>,
    #[serde(alias = "Billing_State")]
    pub billing_state: Option<String>,
    #[serde(alias = "Shipping_State")]
    pub shipping_state: Option<String>,
    #[serde(alias = "Billing_Code")]
    pub billing_code: Option<String>,
    #[serde(alias = "Shipping_Code")]
    pub shipping_code: Option<String>,
    #[serde(alias = "Billing_Country")]
    pub billing_country: Option<String>,
    #[serde(alias = "Shipping_Country")]
    pub shipping_country: Option<String>,
    #[serde(alias = "Product_Details")]
    pub product_details: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Terms_and_Conditions")]
    pub terms_and_conditions: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Sub_Total")]
    pub sub_total: Option<f64>,
    #[serde(alias = "Discount")]
    pub discount: Option<f64>,
    #[serde(alias = "Tax")]
    pub tax: Option<f64>,
    #[serde(alias = "Adjustment")]
    pub adjustment: Option<f64>,
    #[serde(alias = "Grand_Total")]
    pub grand_total: Option<f64>,
}

impl RecordsModule for SalesOrders {
    type Input = SalesOrdersInput;
    fn api_path() -> &'static str {
        "Sales_Orders"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct SalesOrdersInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "SO_Number", skip_serializing_if = "Option::is_none")]
    pub so_number: Option<String>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Deal_Name", skip_serializing_if = "Option::is_none")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(rename = "Customer_No", skip_serializing_if = "Option::is_none")]
    pub customer_no: Option<String>,
    #[serde(rename = "Purchase_Order", skip_serializing_if = "Option::is_none")]
    pub purchase_order: Option<String>,
    #[serde(rename = "Quote_Name", skip_serializing_if = "Option::is_none")]
    pub quote_name: Option<serde_json::Value>,
    #[serde(rename = "Due_Date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "Pending", skip_serializing_if = "Option::is_none")]
    pub pending: Option<String>,
    #[serde(rename = "Contact_Name", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(rename = "Carrier", skip_serializing_if = "Option::is_none")]
    pub carrier: Option<String>,
    #[serde(rename = "Excise_Duty", skip_serializing_if = "Option::is_none")]
    pub excise_duty: Option<f64>,
    #[serde(rename = "Sales_Commission", skip_serializing_if = "Option::is_none")]
    pub sales_commission: Option<f64>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Billing_Street", skip_serializing_if = "Option::is_none")]
    pub billing_street: Option<String>,
    #[serde(rename = "Shipping_Street", skip_serializing_if = "Option::is_none")]
    pub shipping_street: Option<String>,
    #[serde(rename = "Billing_City", skip_serializing_if = "Option::is_none")]
    pub billing_city: Option<String>,
    #[serde(rename = "Shipping_City", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "Billing_State", skip_serializing_if = "Option::is_none")]
    pub billing_state: Option<String>,
    #[serde(rename = "Shipping_State", skip_serializing_if = "Option::is_none")]
    pub shipping_state: Option<String>,
    #[serde(rename = "Billing_Code", skip_serializing_if = "Option::is_none")]
    pub billing_code: Option<String>,
    #[serde(rename = "Shipping_Code", skip_serializing_if = "Option::is_none")]
    pub shipping_code: Option<String>,
    #[serde(rename = "Billing_Country", skip_serializing_if = "Option::is_none")]
    pub billing_country: Option<String>,
    #[serde(rename = "Shipping_Country", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "Product_Details")]
    pub product_details: Vec<serde_json::Value>,
    #[serde(rename = "Terms_and_Conditions", skip_serializing_if = "Option::is_none")]
    pub terms_and_conditions: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Sub_Total", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<f64>,
    #[serde(rename = "Discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    #[serde(rename = "Tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    #[serde(rename = "Adjustment", skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<f64>,
    #[serde(rename = "Grand_Total", skip_serializing_if = "Option::is_none")]
    pub grand_total: Option<f64>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct PurchaseOrders {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "PO_Number")]
    pub po_number: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Vendor_Name")]
    pub vendor_name: Option<serde_json::Value>,
    #[serde(alias = "Requisition_No")]
    pub requisition_no: Option<String>,
    #[serde(alias = "Tracking_Number")]
    pub tracking_number: Option<String>,
    #[serde(alias = "Contact_Name")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(alias = "PO_Date")]
    pub po_date: Option<String>,
    #[serde(alias = "Due_Date")]
    pub due_date: Option<String>,
    #[serde(alias = "Carrier")]
    pub carrier: Option<String>,
    #[serde(alias = "Excise_Duty")]
    pub excise_duty: Option<f64>,
    #[serde(alias = "Sales_Commission")]
    pub sales_commission: Option<f64>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Billing_Street")]
    pub billing_street: Option<String>,
    #[serde(alias = "Shipping_Street")]
    pub shipping_street: Option<String>,
    #[serde(alias = "Billing_City")]
    pub billing_city: Option<String>,
    #[serde(alias = "Shipping_City")]
    pub shipping_city: Option<String>,
    #[serde(alias = "Billing_State")]
    pub billing_state: Option<String>,
    #[serde(alias = "Shipping_State")]
    pub shipping_state: Option<String>,
    #[serde(alias = "Billing_Code")]
    pub billing_code: Option<String>,
    #[serde(alias = "Shipping_Code")]
    pub shipping_code: Option<String>,
    #[serde(alias = "Billing_Country")]
    pub billing_country: Option<String>,
    #[serde(alias = "Shipping_Country")]
    pub shipping_country: Option<String>,
    #[serde(alias = "Product_Details")]
    pub product_details: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Terms_and_Conditions")]
    pub terms_and_conditions: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Sub_Total")]
    pub sub_total: Option<f64>,
    #[serde(alias = "Discount")]
    pub discount: Option<f64>,
    #[serde(alias = "Tax")]
    pub tax: Option<f64>,
    #[serde(alias = "Adjustment")]
    pub adjustment: Option<f64>,
    #[serde(alias = "Grand_Total")]
    pub grand_total: Option<f64>,
}

impl RecordsModule for PurchaseOrders {
    type Input = PurchaseOrdersInput;
    fn api_path() -> &'static str {
        "Purchase_Orders"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct PurchaseOrdersInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "PO_Number", skip_serializing_if = "Option::is_none")]
    pub po_number: Option<String>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Vendor_Name")]
    pub vendor_name: serde_json::Value,
    #[serde(rename = "Requisition_No", skip_serializing_if = "Option::is_none")]
    pub requisition_no: Option<String>,
    #[serde(rename = "Tracking_Number", skip_serializing_if = "Option::is_none")]
    pub tracking_number: Option<String>,
    #[serde(rename = "Contact_Name", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(rename = "PO_Date", skip_serializing_if = "Option::is_none")]
    pub po_date: Option<String>,
    #[serde(rename = "Due_Date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "Carrier", skip_serializing_if = "Option::is_none")]
    pub carrier: Option<String>,
    #[serde(rename = "Excise_Duty", skip_serializing_if = "Option::is_none")]
    pub excise_duty: Option<f64>,
    #[serde(rename = "Sales_Commission", skip_serializing_if = "Option::is_none")]
    pub sales_commission: Option<f64>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Billing_Street", skip_serializing_if = "Option::is_none")]
    pub billing_street: Option<String>,
    #[serde(rename = "Shipping_Street", skip_serializing_if = "Option::is_none")]
    pub shipping_street: Option<String>,
    #[serde(rename = "Billing_City", skip_serializing_if = "Option::is_none")]
    pub billing_city: Option<String>,
    #[serde(rename = "Shipping_City", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "Billing_State", skip_serializing_if = "Option::is_none")]
    pub billing_state: Option<String>,
    #[serde(rename = "Shipping_State", skip_serializing_if = "Option::is_none")]
    pub shipping_state: Option<String>,
    #[serde(rename = "Billing_Code", skip_serializing_if = "Option::is_none")]
    pub billing_code: Option<String>,
    #[serde(rename = "Shipping_Code", skip_serializing_if = "Option::is_none")]
    pub shipping_code: Option<String>,
    #[serde(rename = "Billing_Country", skip_serializing_if = "Option::is_none")]
    pub billing_country: Option<String>,
    #[serde(rename = "Shipping_Country", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "Product_Details")]
    pub product_details: Vec<serde_json::Value>,
    #[serde(rename = "Terms_and_Conditions", skip_serializing_if = "Option::is_none")]
    pub terms_and_conditions: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Sub_Total", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<f64>,
    #[serde(rename = "Discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    #[serde(rename = "Tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    #[serde(rename = "Adjustment", skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<f64>,
    #[serde(rename = "Grand_Total", skip_serializing_if = "Option::is_none")]
    pub grand_total: Option<f64>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Calls {
    pub id: String,
    #[serde(alias = "Who_Id")]
    pub who_id: Option<serde_json::Value>,
    #[serde(alias = "What_Id")]
    pub what_id: Option<serde_json::Value>,
    #[serde(alias = "Call_Type")]
    pub call_type: Option<String>,
    #[serde(alias = "Call_Start_Time")]
    pub call_start_time: Option<String>,
    #[serde(alias = "Call_Duration")]
    pub call_duration: Option<String>,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Dialled_Number")]
    pub dialled_number: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Caller_ID")]
    pub caller_id: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Reminder")]
    pub reminder: Option<String>,
    #[serde(alias = "Call_Duration_in_seconds")]
    pub call_duration_in_seconds: Option<i64>,
    #[serde(alias = "CTI_Entry")]
    pub cti_entry: Option<bool>,
    #[serde(alias = "Call_Status")]
    pub call_status: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Call_Purpose")]
    pub call_purpose: Option<String>,
    #[serde(alias = "Call_Agenda")]
    pub call_agenda: Option<String>,
    #[serde(alias = "Call_Result")]
    pub call_result: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
}

impl RecordsModule for Calls {
    type Input = CallsInput;
    fn api_path() -> &'static str {
        "Calls"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct CallsInput {
    #[serde(rename = "Who_Id", skip_serializing_if = "Option::is_none")]
    pub who_id: Option<serde_json::Value>,
    #[serde(rename = "What_Id", skip_serializing_if = "Option::is_none")]
    pub what_id: Option<serde_json::Value>,
    #[serde(rename = "Call_Type")]
    pub call_type: String,
    #[serde(rename = "Call_Start_Time")]
    pub call_start_time: String,
    #[serde(rename = "Call_Duration")]
    pub call_duration: String,
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Dialled_Number", skip_serializing_if = "Option::is_none")]
    pub dialled_number: Option<String>,
    #[serde(rename = "Subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(rename = "Caller_ID", skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Reminder", skip_serializing_if = "Option::is_none")]
    pub reminder: Option<String>,
    #[serde(rename = "Call_Duration_in_seconds", skip_serializing_if = "Option::is_none")]
    pub call_duration_in_seconds: Option<i64>,
    #[serde(rename = "CTI_Entry", skip_serializing_if = "Option::is_none")]
    pub cti_entry: Option<bool>,
    #[serde(rename = "Call_Status", skip_serializing_if = "Option::is_none")]
    pub call_status: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Call_Purpose", skip_serializing_if = "Option::is_none")]
    pub call_purpose: Option<String>,
    #[serde(rename = "Call_Agenda", skip_serializing_if = "Option::is_none")]
    pub call_agenda: Option<String>,
    #[serde(rename = "Call_Result", skip_serializing_if = "Option::is_none")]
    pub call_result: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Invoices {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Invoice_Number")]
    pub invoice_number: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Sales_Order")]
    pub sales_order: Option<serde_json::Value>,
    #[serde(alias = "Invoice_Date")]
    pub invoice_date: Option<String>,
    #[serde(alias = "Purchase_Order")]
    pub purchase_order: Option<String>,
    #[serde(alias = "Due_Date")]
    pub due_date: Option<String>,
    #[serde(alias = "Excise_Duty")]
    pub excise_duty: Option<f64>,
    #[serde(alias = "Sales_Commission")]
    pub sales_commission: Option<f64>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Contact_Name")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Billing_Street")]
    pub billing_street: Option<String>,
    #[serde(alias = "Shipping_Street")]
    pub shipping_street: Option<String>,
    #[serde(alias = "Billing_City")]
    pub billing_city: Option<String>,
    #[serde(alias = "Shipping_City")]
    pub shipping_city: Option<String>,
    #[serde(alias = "Billing_State")]
    pub billing_state: Option<String>,
    #[serde(alias = "Shipping_State")]
    pub shipping_state: Option<String>,
    #[serde(alias = "Billing_Code")]
    pub billing_code: Option<String>,
    #[serde(alias = "Shipping_Code")]
    pub shipping_code: Option<String>,
    #[serde(alias = "Billing_Country")]
    pub billing_country: Option<String>,
    #[serde(alias = "Shipping_Country")]
    pub shipping_country: Option<String>,
    #[serde(alias = "Product_Details")]
    pub product_details: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Terms_and_Conditions")]
    pub terms_and_conditions: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Sub_Total")]
    pub sub_total: Option<f64>,
    #[serde(alias = "Discount")]
    pub discount: Option<f64>,
    #[serde(alias = "Tax")]
    pub tax: Option<f64>,
    #[serde(alias = "Adjustment")]
    pub adjustment: Option<f64>,
    #[serde(alias = "Grand_Total")]
    pub grand_total: Option<f64>,
}

impl RecordsModule for Invoices {
    type Input = InvoicesInput;
    fn api_path() -> &'static str {
        "Invoices"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct InvoicesInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Invoice_Number", skip_serializing_if = "Option::is_none")]
    pub invoice_number: Option<String>,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Sales_Order", skip_serializing_if = "Option::is_none")]
    pub sales_order: Option<serde_json::Value>,
    #[serde(rename = "Invoice_Date", skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<String>,
    #[serde(rename = "Purchase_Order", skip_serializing_if = "Option::is_none")]
    pub purchase_order: Option<String>,
    #[serde(rename = "Due_Date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "Excise_Duty", skip_serializing_if = "Option::is_none")]
    pub excise_duty: Option<f64>,
    #[serde(rename = "Sales_Commission", skip_serializing_if = "Option::is_none")]
    pub sales_commission: Option<f64>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Contact_Name", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Billing_Street", skip_serializing_if = "Option::is_none")]
    pub billing_street: Option<String>,
    #[serde(rename = "Shipping_Street", skip_serializing_if = "Option::is_none")]
    pub shipping_street: Option<String>,
    #[serde(rename = "Billing_City", skip_serializing_if = "Option::is_none")]
    pub billing_city: Option<String>,
    #[serde(rename = "Shipping_City", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "Billing_State", skip_serializing_if = "Option::is_none")]
    pub billing_state: Option<String>,
    #[serde(rename = "Shipping_State", skip_serializing_if = "Option::is_none")]
    pub shipping_state: Option<String>,
    #[serde(rename = "Billing_Code", skip_serializing_if = "Option::is_none")]
    pub billing_code: Option<String>,
    #[serde(rename = "Shipping_Code", skip_serializing_if = "Option::is_none")]
    pub shipping_code: Option<String>,
    #[serde(rename = "Billing_Country", skip_serializing_if = "Option::is_none")]
    pub billing_country: Option<String>,
    #[serde(rename = "Shipping_Country", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "Product_Details")]
    pub product_details: Vec<serde_json::Value>,
    #[serde(rename = "Terms_and_Conditions", skip_serializing_if = "Option::is_none")]
    pub terms_and_conditions: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Sub_Total", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<f64>,
    #[serde(rename = "Discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    #[serde(rename = "Tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    #[serde(rename = "Adjustment", skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<f64>,
    #[serde(rename = "Grand_Total", skip_serializing_if = "Option::is_none")]
    pub grand_total: Option<f64>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Campaigns {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Type")]
    pub _type: Option<String>,
    #[serde(alias = "Campaign_Name")]
    pub campaign_name: Option<String>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Start_Date")]
    pub start_date: Option<String>,
    #[serde(alias = "End_Date")]
    pub end_date: Option<String>,
    #[serde(alias = "Expected_Revenue")]
    pub expected_revenue: Option<f64>,
    #[serde(alias = "Budgeted_Cost")]
    pub budgeted_cost: Option<f64>,
    #[serde(alias = "Actual_Cost")]
    pub actual_cost: Option<f64>,
    #[serde(alias = "Expected_Response")]
    pub expected_response: Option<String>,
    #[serde(alias = "Num_sent")]
    pub num_sent: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Parent_Campaign")]
    pub parent_campaign: Option<serde_json::Value>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
}

impl RecordsModule for Campaigns {
    type Input = CampaignsInput;
    fn api_path() -> &'static str {
        "Campaigns"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct CampaignsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "Campaign_Name")]
    pub campaign_name: String,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Start_Date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "End_Date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "Expected_Revenue", skip_serializing_if = "Option::is_none")]
    pub expected_revenue: Option<f64>,
    #[serde(rename = "Budgeted_Cost", skip_serializing_if = "Option::is_none")]
    pub budgeted_cost: Option<f64>,
    #[serde(rename = "Actual_Cost", skip_serializing_if = "Option::is_none")]
    pub actual_cost: Option<f64>,
    #[serde(rename = "Expected_Response", skip_serializing_if = "Option::is_none")]
    pub expected_response: Option<String>,
    #[serde(rename = "Num_sent", skip_serializing_if = "Option::is_none")]
    pub num_sent: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Parent_Campaign", skip_serializing_if = "Option::is_none")]
    pub parent_campaign: Option<serde_json::Value>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Vendors {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Vendor_Name")]
    pub vendor_name: Option<String>,
    #[serde(alias = "Phone")]
    pub phone: Option<String>,
    #[serde(alias = "Email")]
    pub email: Option<String>,
    #[serde(alias = "Website")]
    pub website: Option<String>,
    #[serde(alias = "GL_Account")]
    pub gl_account: Option<String>,
    #[serde(alias = "Category")]
    pub category: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Street")]
    pub street: Option<String>,
    #[serde(alias = "City")]
    pub city: Option<String>,
    #[serde(alias = "State")]
    pub state: Option<String>,
    #[serde(alias = "Zip_Code")]
    pub zip_code: Option<String>,
    #[serde(alias = "Country")]
    pub country: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Record_Image")]
    pub record_image: Option<String>,
}

impl RecordsModule for Vendors {
    type Input = VendorsInput;
    fn api_path() -> &'static str {
        "Vendors"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct VendorsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Vendor_Name")]
    pub vendor_name: String,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    #[serde(rename = "GL_Account", skip_serializing_if = "Option::is_none")]
    pub gl_account: Option<String>,
    #[serde(rename = "Category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Street", skip_serializing_if = "Option::is_none")]
    pub street: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "State", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "Zip_Code", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Record_Image", skip_serializing_if = "Option::is_none")]
    pub record_image: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct PriceBooks {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Price_Book_Name")]
    pub price_book_name: Option<String>,
    #[serde(alias = "Active")]
    pub active: Option<bool>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Pricing_Model")]
    pub pricing_model: Option<String>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Pricing_Details")]
    pub pricing_details: Option<Vec<serde_json::Value>>,
}

impl RecordsModule for PriceBooks {
    type Input = PriceBooksInput;
    fn api_path() -> &'static str {
        "Price_Books"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct PriceBooksInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Price_Book_Name")]
    pub price_book_name: String,
    #[serde(rename = "Active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Pricing_Model", skip_serializing_if = "Option::is_none")]
    pub pricing_model: Option<String>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Pricing_Details", skip_serializing_if = "Option::is_none")]
    pub pricing_details: Option<Vec<serde_json::Value>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Cases {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Case_Number")]
    pub case_number: Option<String>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Product_Name")]
    pub product_name: Option<serde_json::Value>,
    #[serde(alias = "Priority")]
    pub priority: Option<String>,
    #[serde(alias = "Type")]
    pub _type: Option<String>,
    #[serde(alias = "Case_Reason")]
    pub case_reason: Option<String>,
    #[serde(alias = "Case_Origin")]
    pub case_origin: Option<String>,
    #[serde(alias = "Subject")]
    pub subject: Option<String>,
    #[serde(alias = "Related_To")]
    pub related_to: Option<serde_json::Value>,
    #[serde(alias = "No_of_comments")]
    pub no_of_comments: Option<i64>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Reported_By")]
    pub reported_by: Option<String>,
    #[serde(alias = "Deal_Name")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(alias = "Email")]
    pub email: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Phone")]
    pub phone: Option<String>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Description")]
    pub description: Option<String>,
    #[serde(alias = "Internal_Comments")]
    pub internal_comments: Option<String>,
    #[serde(alias = "Solution")]
    pub solution: Option<String>,
    #[serde(alias = "Add_Comment")]
    pub add_comment: Option<String>,
    #[serde(alias = "Comments")]
    pub comments: Option<Vec<serde_json::Value>>,
}

impl RecordsModule for Cases {
    type Input = CasesInput;
    fn api_path() -> &'static str {
        "Cases"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct CasesInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Case_Number", skip_serializing_if = "Option::is_none")]
    pub case_number: Option<String>,
    #[serde(rename = "Status")]
    pub status: String,
    #[serde(rename = "Product_Name", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<serde_json::Value>,
    #[serde(rename = "Priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "Case_Reason", skip_serializing_if = "Option::is_none")]
    pub case_reason: Option<String>,
    #[serde(rename = "Case_Origin")]
    pub case_origin: String,
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Related_To", skip_serializing_if = "Option::is_none")]
    pub related_to: Option<serde_json::Value>,
    #[serde(rename = "No_of_comments", skip_serializing_if = "Option::is_none")]
    pub no_of_comments: Option<i64>,
    #[serde(rename = "Account_Name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<serde_json::Value>,
    #[serde(rename = "Reported_By", skip_serializing_if = "Option::is_none")]
    pub reported_by: Option<String>,
    #[serde(rename = "Deal_Name", skip_serializing_if = "Option::is_none")]
    pub deal_name: Option<serde_json::Value>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Internal_Comments", skip_serializing_if = "Option::is_none")]
    pub internal_comments: Option<String>,
    #[serde(rename = "Solution", skip_serializing_if = "Option::is_none")]
    pub solution: Option<String>,
    #[serde(rename = "Add_Comment", skip_serializing_if = "Option::is_none")]
    pub add_comment: Option<String>,
    #[serde(rename = "Comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<serde_json::Value>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Solutions {
    pub id: String,
    #[serde(alias = "Solution_Number")]
    pub solution_number: Option<String>,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Solution_Title")]
    pub solution_title: Option<String>,
    #[serde(alias = "Published")]
    pub published: Option<bool>,
    #[serde(alias = "Status")]
    pub status: Option<String>,
    #[serde(alias = "Product_Name")]
    pub product_name: Option<serde_json::Value>,
    #[serde(alias = "No_of_comments")]
    pub no_of_comments: Option<i64>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Tag")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(alias = "Question")]
    pub question: Option<String>,
    #[serde(alias = "Answer")]
    pub answer: Option<String>,
    #[serde(alias = "Add_Comment")]
    pub add_comment: Option<String>,
    #[serde(alias = "Comments")]
    pub comments: Option<Vec<serde_json::Value>>,
}

impl RecordsModule for Solutions {
    type Input = SolutionsInput;
    fn api_path() -> &'static str {
        "Solutions"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct SolutionsInput {
    #[serde(rename = "Solution_Number", skip_serializing_if = "Option::is_none")]
    pub solution_number: Option<String>,
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Solution_Title")]
    pub solution_title: String,
    #[serde(rename = "Published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "Product_Name", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<serde_json::Value>,
    #[serde(rename = "No_of_comments", skip_serializing_if = "Option::is_none")]
    pub no_of_comments: Option<i64>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<serde_json::Value>>,
    #[serde(rename = "Question", skip_serializing_if = "Option::is_none")]
    pub question: Option<String>,
    #[serde(rename = "Answer", skip_serializing_if = "Option::is_none")]
    pub answer: Option<String>,
    #[serde(rename = "Add_Comment", skip_serializing_if = "Option::is_none")]
    pub add_comment: Option<String>,
    #[serde(rename = "Comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<serde_json::Value>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Visits {
    pub id: String,
}

impl RecordsModule for Visits {
    type Input = VisitsInput;
    fn api_path() -> &'static str {
        "Visits"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct VisitsInput {}

#[derive(Debug, Clone, Deserialize)]
pub struct Notes {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Note_Title")]
    pub note_title: Option<String>,
    #[serde(alias = "Note_Content")]
    pub note_content: Option<String>,
    #[serde(alias = "Parent_Id")]
    pub parent_id: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
}

impl RecordsModule for Notes {
    type Input = NotesInput;
    fn api_path() -> &'static str {
        "Notes"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct NotesInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Note_Title", skip_serializing_if = "Option::is_none")]
    pub note_title: Option<String>,
    #[serde(rename = "Note_Content", skip_serializing_if = "Option::is_none")]
    pub note_content: Option<String>,
    #[serde(rename = "Parent_Id")]
    pub parent_id: serde_json::Value,
    pub se_module: String,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct Approvals {
    pub id: String,
}

impl RecordsModule for Approvals {
    type Input = ApprovalsInput;
    fn api_path() -> &'static str {
        "Approvals"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct ApprovalsInput {}

#[derive(Debug, Clone, Deserialize)]
pub struct Attachments {
    pub id: String,
    #[serde(alias = "Owner")]
    pub owner: Option<serde_json::Value>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Created_By")]
    pub created_by: Option<serde_json::Value>,
    #[serde(alias = "Created_Time")]
    pub created_time: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "File_Name")]
    pub file_name: Option<String>,
    #[serde(alias = "Size")]
    pub size: Option<String>,
    #[serde(alias = "Parent_Id")]
    pub parent_id: Option<serde_json::Value>,
}

impl RecordsModule for Attachments {
    type Input = AttachmentsInput;
    fn api_path() -> &'static str {
        "Attachments"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct AttachmentsInput {
    #[serde(rename = "Owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Created_By", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<serde_json::Value>,
    #[serde(rename = "Created_Time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "File_Name")]
    pub file_name: String,
    #[serde(rename = "Size")]
    pub size: String,
    #[serde(rename = "Parent_Id")]
    pub parent_id: serde_json::Value,
}

#[derive(Debug, Clone, Deserialize)]
pub struct ActionsPerformed {
    pub id: String,
}

impl RecordsModule for ActionsPerformed {
    type Input = ActionsPerformedInput;
    fn api_path() -> &'static str {
        "Actions_Performed"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct ActionsPerformedInput {}

#[derive(Debug, Clone, Deserialize)]
pub struct AccountStatusHistory {
    pub id: String,
    #[serde(alias = "Account_Status")]
    pub account_status: Option<String>,
    #[serde(alias = "Modified_Time")]
    pub modified_time: Option<String>,
    #[serde(alias = "Currency")]
    pub currency: Option<String>,
    #[serde(alias = "Exchange_Rate")]
    pub exchange_rate: Option<f64>,
    #[serde(alias = "Modified_By")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(alias = "Account_Name")]
    pub account_name: Option<serde_json::Value>,
    #[serde(alias = "Last_Activity_Time")]
    pub last_activity_time: Option<String>,
    #[serde(alias = "Duration_Days")]
    pub duration_days: Option<i64>,
}

impl RecordsModule for AccountStatusHistory {
    type Input = AccountStatusHistoryInput;
    fn api_path() -> &'static str {
        "Account_Status_History"
    }
}

#[derive(Debug, Clone, Default, Serialize)]
pub struct AccountStatusHistoryInput {
    #[serde(rename = "Account_Status")]
    pub account_status: String,
    #[serde(rename = "Modified_Time", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Exchange_Rate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "Modified_By", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<serde_json::Value>,
    #[serde(rename = "Account_Name")]
    pub account_name: serde_json::Value,
    #[serde(rename = "Last_Activity_Time", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "Duration_Days", skip_serializing_if = "Option::is_none")]
    pub duration_days: Option<i64>,
}
